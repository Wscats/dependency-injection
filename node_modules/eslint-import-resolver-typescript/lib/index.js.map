{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import path from 'path'\n\nimport {\n  ConfigLoaderSuccessResult,\n  createMatchPath,\n  loadConfig,\n  ConfigLoaderResult,\n} from 'tsconfig-paths'\nimport globSync from 'tiny-glob/sync'\n\nimport isGlob from 'is-glob'\nimport { isCore, sync } from 'resolve'\nimport debug from 'debug'\n\nconst log = debug('eslint-import-resolver-ts')\n\nconst extensions = ['.ts', '.tsx', '.d.ts'].concat(\n  // eslint-disable-next-line node/no-deprecated-api\n  Object.keys(require.extensions),\n  '.jsx',\n)\n\nexport const interfaceVersion = 2\n\nexport interface TsResolverOptions {\n  alwaysTryTypes?: boolean\n  directory?: string | string[]\n}\n\n/**\n * @param {string} source the module to resolve; i.e './some-module'\n * @param {string} file the importing file's full path; i.e. '/usr/local/bin/file.js'\n */\nexport function resolve(\n  source: string,\n  file: string,\n  options: TsResolverOptions = {},\n): {\n  found: boolean\n  path?: string | null\n} {\n  log('looking for:', source)\n\n  // don't worry about core node modules\n  if (isCore(source)) {\n    log('matched core:', source)\n\n    return {\n      found: true,\n      path: null,\n    }\n  }\n\n  initMappers(options)\n  const mappedPath = getMappedPath(source, file)\n  if (mappedPath) {\n    log('matched ts path:', mappedPath)\n  }\n\n  // note that even if we map the path, we still need to do a final resolve\n  let foundNodePath: string | null | undefined\n  try {\n    foundNodePath = sync(mappedPath || source, {\n      extensions,\n      basedir: path.dirname(path.resolve(file)),\n      packageFilter,\n    })\n  } catch (err) {\n    foundNodePath = null\n  }\n\n  // naive attempt at @types/* resolution,\n  // if path is neither absolute nor relative\n  if (\n    (/\\.jsx?$/.test(foundNodePath!) ||\n      (options.alwaysTryTypes && !foundNodePath)) &&\n    !/^@types[/\\\\]/.test(source) &&\n    !path.isAbsolute(source) &&\n    !source.startsWith('.')\n  ) {\n    const definitelyTyped = resolve(\n      '@types' + path.sep + mangleScopedPackage(source),\n      file,\n      options,\n    )\n    if (definitelyTyped.found) {\n      return definitelyTyped\n    }\n  }\n\n  if (foundNodePath) {\n    log('matched node path:', foundNodePath)\n\n    return {\n      found: true,\n      path: foundNodePath,\n    }\n  }\n\n  log(\"didn't find \", source)\n\n  return {\n    found: false,\n  }\n}\n\nfunction packageFilter(pkg: Record<string, string>) {\n  pkg.main =\n    pkg.types || pkg.typings || pkg.module || pkg['jsnext:main'] || pkg.main\n  return pkg\n}\n\nlet mappers:\n  | Array<(source: string, file: string) => string | undefined>\n  | undefined\n\n/**\n * @param {string} source the module to resolve; i.e './some-module'\n * @param {string} file the importing file's full path; i.e. '/usr/local/bin/file.js'\n * @returns The mapped path of the module or undefined\n */\nfunction getMappedPath(source: string, file: string) {\n  const paths = mappers!\n    .map(mapper => mapper(source, file))\n    .filter(path => !!path)\n\n  if (paths.length > 1) {\n    log('found multiple matching ts paths:', paths)\n  }\n\n  return paths[0]\n}\n\nfunction initMappers(options: TsResolverOptions) {\n  if (mappers) {\n    return\n  }\n\n  const isArrayOfStrings = (array?: string | string[]) =>\n    Array.isArray(array) && array.every(o => typeof o === 'string')\n\n  const configPaths =\n    typeof options.directory === 'string'\n      ? [options.directory]\n      : isArrayOfStrings(options.directory)\n      ? options.directory\n      : [process.cwd()]\n\n  mappers = configPaths!\n    // turn glob patterns into paths\n    .reduce<string[]>(\n      (paths, path) => paths.concat(isGlob(path) ? globSync(path) : path),\n      [],\n    )\n    .map(loadConfig)\n    .filter(isConfigLoaderSuccessResult)\n    .map(configLoaderResult => {\n      const matchPath = createMatchPath(\n        configLoaderResult.absoluteBaseUrl,\n        configLoaderResult.paths,\n      )\n\n      return (source: string, file: string) => {\n        // exclude files that are not part of the config base url\n        if (!file.includes(configLoaderResult.absoluteBaseUrl)) {\n          return undefined\n        }\n\n        // look for files based on setup tsconfig \"paths\"\n        return matchPath(source, undefined, undefined, extensions)\n      }\n    })\n}\n\nfunction isConfigLoaderSuccessResult(\n  configLoaderResult: ConfigLoaderResult,\n): configLoaderResult is ConfigLoaderSuccessResult {\n  if (configLoaderResult.resultType !== 'success') {\n    // this can happen if the user has problems with their tsconfig\n    // or if it's valid, but they don't have baseUrl set\n    log('failed to init tsconfig-paths:', configLoaderResult.message)\n    return false\n  }\n  return true\n}\n\n/**\n * For a scoped package, we must look in `@types/foo__bar` instead of `@types/@foo/bar`.\n */\nfunction mangleScopedPackage(moduleName: string) {\n  if (moduleName.startsWith('@')) {\n    const replaceSlash = moduleName.replace(path.sep, '__')\n    if (replaceSlash !== moduleName) {\n      return replaceSlash.slice(1) // Take off the \"@\"\n    }\n  }\n  return moduleName\n}\n"]}