module.exports = {
  extends: ['./base.js', 'plugin:@typescript-eslint/recommended'],
  rules: {
    // 对于 TypeScript 不需要此规则
    'consistent-return': 'off',

    // 以下规则 TypeScript 可以识别, 不需要 eslint 再判断
    'no-redeclare': 'off',
    'no-undef': 'off',
    'import/export': 'off',
    'no-unused-expressions': 'off',

    // 同 no-unused-expressions 的 TypeScript 版本
    '@typescript-eslint/no-unused-expressions': ['error', {
      allowShortCircuit: false,
      allowTernary: false,
      allowTaggedTemplates: false,
    }],

    // 此规则与函数重载冲突
    'no-dupe-class-members': 'off',

    // 此规则与 namespace 冲突
    'no-inner-declarations': 'off',

    // 以下规则与 @typescript-eslint 中的重复
    'no-use-before-define': 'off',

    // 允许在构造函数中声明类成员
    'no-useless-constructor': 'off',
    '@typescript-eslint/no-parameter-properties': 'off',

    // 不在 interface 前增加 I 前缀
    '@typescript-eslint/interface-name-prefix': 'off',

    // 不要求显式指明类成员访问控制 (public/protected/private)
    '@typescript-eslint/explicit-member-accessibility': 'off',

    // 不要求函数显示指明返回类型
    '@typescript-eslint/explicit-function-return-type': 'off',

    // 允许使用 any
    '@typescript-eslint/no-explicit-any': 'off',

    // 允许使用 namespace
    '@typescript-eslint/no-namespace': 'off',

    // 允许使用非空断言 (!)
    '@typescript-eslint/no-non-null-assertion': 'off',

    // 允许使用 import xxx = require("xxx");
    // 使用 power-assertion 时必须以这种风格引入 assert 函数
    '@typescript-eslint/no-require-imports': 'off',

    // 允许使用 /// <reference />
    // 在编写库的时候有用
    '@typescript-eslint/no-triple-slash-reference': 'off',

    // 使用 2 空格缩进
    // 使用 @typescript-eslint 后会覆盖原来的 indent 规则, 需要重新定义
    '@typescript-eslint/indent': ['error', 2],

    // 禁止无用的类定义 (空类定义, 仅有构造函数, 仅有静态成员)
    '@typescript-eslint/no-extraneous-class': 'error',

    // 禁止将 this 赋值到其它变量上
    // 如果有箭头函数无法覆盖的情况, 在代码中禁用即可
    '@typescript-eslint/no-this-alias': ['error', {
      allowDestructuring: true,
    }],

    // 优先使用 function type, 而不是用 interface 定义类型
    '@typescript-eslint/prefer-function-type': 'error',

    // 允许直接对对象进行类型转换
    '@typescript-eslint/no-object-literal-type-assertion': 'off',

    // 使用无用的 type assertion 时警告
    '@typescript-eslint/no-unnecessary-type-assertion': 'warn',

    // 允许 .tsx 后缀
    'react/jsx-filename-extension': ['error', { extensions: ['.jsx', '.tsx'] }],

    // TODO: 这个在 TypeScript 里面似乎有 bug, 先关闭
    'import/extensions': 'off',
  },
};
