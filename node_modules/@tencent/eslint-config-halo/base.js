// eslint-disable-next-line import/no-extraneous-dependencies
const resolve = require('resolve');

/** 使用与 eslint-config-react 相同的方法获取 react 版本, 从而避免插件的 Warning */
function getReactVersionSetting() {
  try {
    resolve.sync('react', { basedir: process.cwd() });
    return 'detect';
  } catch (_) {
    return '999.999.999';
  }
}

module.exports = {
  extends: [
    '@tencent/eslint-config-tencent',
    'airbnb',
    'plugin:eslint-comments/recommended',
  ],
  plugins: ['jsdoc'],
  env: {
    browser: true,
    node: true,
  },
  settings: {
    react: {
      version: getReactVersionSetting(),
    },
  },
  rules: {
    // 不强制要求类成员函数使用 this (便于在 TAF Imp 和 React 中拆分函数)
    'class-methods-use-this': 'off',

    // 不限制文件中的 class 数
    'max-classes-per-file': 'off',

    // 只有在命名构造器或者类的时候，才用帕斯卡拼命名法（PascalCase），即首字母大写
    'new-cap': [
      'error',
      {
        properties: false,
        newIsCap: true,
        capIsNew: true,
      },
    ],

    // 允许使用位运算
    'no-bitwise': 'off',

    // 允许使用 console
    'no-console': 'off',

    // 要求函数调用在有换行的情况下，一个参数一行
    'function-paren-newline': ['error', 'multiline'],

    // 不要求对 import 进行排序
    'import/order': 'off',

    // 不要求 import 的模块一定要存在, 因为有自定义的 resolve 和 alias
    'import/no-unresolved': 'off',

    // 不强制使用默认导出
    'import/prefer-default-export': 'off',

    // 不要求结构语法较长时一定要换行 (有时判断不一定准确)
    'object-curly-newline': 'off',

    // 强制要求类成员之间要保留空行, 但允许单行类成员声明之间没有空行
    'lines-between-class-members': ['error', 'always', { exceptAfterSingleLine: true }],

    // 强制要求多行代码块只有要保留空行
    'padding-line-between-statements': [
      'error',
      { blankLine: 'always', prev: 'class', next: '*' },
      { blankLine: 'always', prev: 'function', next: '*' },
      { blankLine: 'always', prev: 'iife', next: '*' },
      { blankLine: 'always', prev: 'multiline-block-like', next: '*' },
      { blankLine: 'always', prev: 'multiline-expression', next: '*' },
    ],

    // 不允许出现多个连续的空格, 但允许行尾注释前出现
    'no-multi-spaces': ['error', { ignoreEOLComments: true }],

    // 不允许修改函数参数, 但允许修改函数参数中的属性
    'no-param-reassign': ['error', { props: false }],

    // 不允许使用 @deprecated 的变量或函数
    'import/no-deprecated': 'error',

    // jsdoc @param 的名字和顺序必须和定义的一致
    'jsdoc/check-param-names': 'error',

    // jsdoc 中 @ 开头的 tag 名称必须符合规范
    'jsdoc/check-tag-names': 'error',

    // 不允许出现未使用的 eslint-disable
    'eslint-comments/no-unused-disable': 'error',
  },
};
