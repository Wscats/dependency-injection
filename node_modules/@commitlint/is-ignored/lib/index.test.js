'use strict';

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _ = require('.');

var _2 = _interopRequireDefault(_);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var VERSION_MESSAGES = ['0.0.1', '0.1.0', '1.0.0', '0.0.1-alpha', '0.0.1-some-crazy-tag', '0.0.1-0', '0.0.1-999', '0.0.1-alpha.0', '0.0.1-alpha.999', '0.0.1-some-crazy-tag.0', '0.0.1-some-crazy-tag.999', '0.0.1-1e69d54', 'v0.0.1', ' v3.0.0'];

var AMENDMENTS = ['Signed-off-by: Developer <example@example.com>', 'Change-Id: I895114872a515a269487a683124b63303818e19c', 'Signed-off-by: Developer <example@example.com>\nChange-Id: I895114872a515a269487a683124b63303818e19c'];

var AMENDED_VERSION_MESSAGES = VERSION_MESSAGES.reduce(function (results, message) {
	return [].concat((0, _toConsumableArray3.default)(results), (0, _toConsumableArray3.default)(AMENDMENTS.map(function (amendment) {
		return `${message}\n\n${amendment}`;
	})));
}, []);

(0, _ava2.default)('should return false when called without arguments', function (t) {
	t.false((0, _2.default)());
});

(0, _ava2.default)('should return false when called with empty string', function (t) {
	t.false((0, _2.default)(''));
});

(0, _ava2.default)('should return false for normal commit', function (t) {
	t.false((0, _2.default)('initial commit'));
});

(0, _ava2.default)('should return true for branch merges', function (t) {
	t.true((0, _2.default)("Merge branch 'iss53'"));
});

(0, _ava2.default)('should return true for branch merges with newline characters', function (t) {
	t.true((0, _2.default)("Merge branch 'ctrom-YarnBuild'\n"));
	t.true((0, _2.default)("Merge branch 'ctrom-YarnBuild'\r\n"));
});

(0, _ava2.default)('should return true for branch merges with multiple newline characters', function (t) {
	t.true((0, _2.default)("Merge branch 'ctrom-YarnBuild'\n\n\n"));
	t.true((0, _2.default)("Merge branch 'ctrom-YarnBuild'\r\n\r\n\r\n"));
});

(0, _ava2.default)('should return true for merged PRs', function (t) {
	t.true((0, _2.default)('Merge pull request #369'));
});

(0, _ava2.default)('should return true for revert commits', function (t) {
	t.true((0, _2.default)(`Revert "docs: add recipe for linting of all commits in a PR (#36)"\n\nThis reverts commit 1e69d542c16c2a32acfd139e32efa07a45f19111.`));
	t.true((0, _2.default)(`revert "docs: add recipe for linting of all commits in a PR (#36)"\n\nThis reverts commit 1e69d542c16c2a32acfd139e32efa07a45f19111.`));
});

(0, _ava2.default)('should ignore npm semver commits', function (t) {
	VERSION_MESSAGES.forEach(function (message) {
		return t.true((0, _2.default)(message));
	});
});

(0, _ava2.default)('should ignore npm semver commits with chore', function (t) {
	VERSION_MESSAGES.forEach(function (message) {
		return t.true((0, _2.default)(`chore: ${message}`));
	});
	VERSION_MESSAGES.forEach(function (message) {
		return t.true((0, _2.default)(`chore(release): ${message}`));
	});
});

(0, _ava2.default)('should ignore npm semver commits with footers', function (t) {
	AMENDED_VERSION_MESSAGES.forEach(function (message) {
		return t.true((0, _2.default)(message));
	});
});

(0, _ava2.default)('should return true fixup commits', function (t) {
	t.true((0, _2.default)('fixup! initial commit'));
});

(0, _ava2.default)('should return true squash commits', function (t) {
	t.true((0, _2.default)('squash! initial commit'));
});

(0, _ava2.default)('should return true for bitbucket merge commits', function (t) {
	t.true((0, _2.default)('Merged in feature/facebook-friends-sync (pull request #8)'));
	t.true((0, _2.default)('Merged develop into feature/component-form-select-card'));
});
//# sourceMappingURL=index.test.js.map