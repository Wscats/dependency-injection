'use strict';

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _case = require('./case');

var _case2 = _interopRequireDefault(_case);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _ava2.default)('true for no params', function (t) {
	var actual = (0, _case2.default)();
	t.is(actual, true);
});

(0, _ava2.default)('true for empty', function (t) {
	var actual = (0, _case2.default)('');
	t.is(actual, true);
});

(0, _ava2.default)('true for lowercase', function (t) {
	var actual = (0, _case2.default)('a');
	t.is(actual, true);
});

(0, _ava2.default)('false for uppercase', function (t) {
	var actual = (0, _case2.default)('A');
	t.is(actual, false);
});

(0, _ava2.default)('true for lowercase on lowercase', function (t) {
	var actual = (0, _case2.default)('a', 'lowercase');
	t.is(actual, true);
});

(0, _ava2.default)('false for uppercase on lowercase', function (t) {
	var actual = (0, _case2.default)('A', 'lowercase');
	t.is(actual, false);
});

(0, _ava2.default)('true for * on lowercase', function (t) {
	var actual = (0, _case2.default)('*', 'lowercase');
	console.log({ actual });
	t.is(actual, true);
});

(0, _ava2.default)('true for uppercase on uppercase', function (t) {
	var actual = (0, _case2.default)('A', 'uppercase');
	t.is(actual, true);
});

(0, _ava2.default)('false for lowercase on uppercase', function (t) {
	var actual = (0, _case2.default)('a', 'uppercase');
	t.is(actual, false);
});

(0, _ava2.default)('true for * on uppercase', function (t) {
	var actual = (0, _case2.default)('*', 'uppercase');
	t.is(actual, true);
});

(0, _ava2.default)('true for sentencecase on sentencecase', function (t) {
	var actual = (0, _case2.default)('Sentence case', 'sentence-case');
	t.is(actual, true);
});

(0, _ava2.default)('false for lowercase on sentencecase', function (t) {
	t.is((0, _case2.default)('sentence case', 'sentence-case'), false);
});

(0, _ava2.default)('false for UPPERCASE on sentencecase', function (t) {
	t.is((0, _case2.default)('UPPERCASE', 'sentence-case'), false);
});

(0, _ava2.default)('true for Start Case on sentencecase', function (t) {
	t.is((0, _case2.default)('Start Case', 'sentence-case'), true);
});

(0, _ava2.default)('false for PascalCase on sentencecase', function (t) {
	t.is((0, _case2.default)('PascalCase', 'sentence-case'), false);
});

(0, _ava2.default)('false for kebab-case on sentencecase', function (t) {
	t.is((0, _case2.default)('kebab-case', 'sentence-case'), false);
});

(0, _ava2.default)('false for snake_case on sentencecase', function (t) {
	t.is((0, _case2.default)('snake_case', 'sentence-case'), false);
});

(0, _ava2.default)('false for camelCase on sentencecase', function (t) {
	t.is((0, _case2.default)('camelCase', 'sentence-case'), false);
});

(0, _ava2.default)('true for * on sentence-case', function (t) {
	var actual = (0, _case2.default)('*', 'sentence-case');
	t.is(actual, true);
});

(0, _ava2.default)('true for * on camel-case', function (t) {
	var actual = (0, _case2.default)('*', 'camel-case');
	t.is(actual, true);
});

(0, _ava2.default)('true for * on kebab-case', function (t) {
	var actual = (0, _case2.default)('*', 'kebab-case');
	t.is(actual, true);
});

(0, _ava2.default)('true for * on snake-case', function (t) {
	var actual = (0, _case2.default)('*', 'snake-case');
	t.is(actual, true);
});

(0, _ava2.default)('true for * on pascal-case', function (t) {
	var actual = (0, _case2.default)('*', 'snake-case');
	t.is(actual, true);
});

(0, _ava2.default)('true for * on start-case', function (t) {
	var actual = (0, _case2.default)('*', 'snake-case');
	t.is(actual, true);
});
//# sourceMappingURL=case.test.js.map