{"version":3,"sources":["../src/index.test.js"],"names":["ensure","t","glob","expected","map","f","actual","Object","keys","deepEqual","true","every","rule","pattern","join","__dirname","ignore","cwd","files","relative","toExport","filePath","fileName","basename","extname"],"mappings":";;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;IAAYA,M;;;;;;AAEZ,mBAAK,mBAAL,EAA0B,UAAMC,CAAN;AAAA;AAAA,MACnB,QADmB,EAEnB,MAFmB;AACP,yBAAMC,KAAK,MAAL,CAAN;AAAA;AAAZC,YAAN,GAAkB,QAAD,CAAqBC,GAArB,CAAyB;AAAA,YAAK,sBAAUC,CAAV,CAAL;AAAA,KAAzB,CAAjB;AACMC,UAAN,GAAeC,OAAOC,IAAP,CAAYR,MAAZ,CAAf;AACAC,MAAEQ,SAAF,CAAYH,MAAZ,EAAoBH,QAApB;AAFkB;AAAA;AAAA;AAAA;AAAA;AADO;AAAA,CAA1B;;AAMA,mBAAK,wBAAL,EAA+B,aAAK;AACnC,KAAMG,SAAS,sBAAON,MAAP,CAAf;AACAC,GAAES,IAAF,CAAOJ,OAAOK,KAAP,CAAa;AAAA,SAAQ,OAAOC,IAAP,KAAgB,UAAxB;AAAA,EAAb,CAAP;AACA,CAHD;;AAKA,SAAeV,IAAf,CAAoBW,OAApB;AAAA;AAAA,MACO,KADP;AACe,yBAAM,sBAAO,CAAC,eAAKC,IAAL,CAAUC,SAAV,EAAqBF,OAArB,CAAD,CAAP,EAAwC;AAC3DG,WAAQ,CAAC,aAAD,EAAgB,cAAhB,CADmD;AAE3DC,QAAKF;AAFsD,GAAxC,CAAN;AAAA;AAARG,SAAN,GAAc,QAAd;AAIA,mBAAOA,MAAMd,GAAN,CAAUe,QAAV,EAAoBf,GAApB,CAAwBgB,QAAxB,CAAP;AAJc;AAAA;AAAA;AAAA;AADf;AAAA;;AAQA,SAASD,QAAT,CAAkBE,QAAlB,EAA4B;AAC3B,QAAO,eAAKF,QAAL,CAAcJ,SAAd,EAAyBM,QAAzB,CAAP;AACA;;AAED,SAASD,QAAT,CAAkBE,QAAlB,EAA4B;AAC3B,QAAO,eAAKC,QAAL,CAAcD,QAAd,EAAwB,eAAKE,OAAL,CAAaF,QAAb,CAAxB,CAAP;AACA","file":"index.test.js","sourcesContent":["import path from 'path';\nimport test from 'ava';\nimport globby from 'globby';\nimport camelCase from 'lodash.camelcase';\nimport values from 'lodash.values';\nimport * as ensure from '.';\n\ntest('exports all rules', async t => {\n\tconst expected = (await glob('*.js')).map(f => camelCase(f));\n\tconst actual = Object.keys(ensure);\n\tt.deepEqual(actual, expected);\n});\n\ntest('rules export functions', t => {\n\tconst actual = values(ensure);\n\tt.true(actual.every(rule => typeof rule === 'function'));\n});\n\nasync function glob(pattern) {\n\tconst files = await globby([path.join(__dirname, pattern)], {\n\t\tignore: ['**/index.js', '**/*.test.js'],\n\t\tcwd: __dirname\n\t});\n\treturn files.map(relative).map(toExport);\n}\n\nfunction relative(filePath) {\n\treturn path.relative(__dirname, filePath);\n}\n\nfunction toExport(fileName) {\n\treturn path.basename(fileName, path.extname(fileName));\n}\n"]}