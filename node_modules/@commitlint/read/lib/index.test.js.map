{"version":3,"sources":["../src/index.test.js"],"names":["sander","t","bootstrap","cwd","writeFile","expected","edit","actual","deepEqual","mkdir"],"mappings":"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","file":"index.test.js","sourcesContent":["import {git} from '@commitlint/test';\nimport test from 'ava';\nimport execa from 'execa';\nimport * as sander from '@marionebl/sander';\n\nimport read from '.';\n\ntest('get edit commit message specified by the `edit` flag', async t => {\n\tconst cwd = await git.bootstrap();\n\n\tawait sander.writeFile(cwd, 'commit-msg-file', 'foo');\n\n\tconst expected = ['foo\\n'];\n\tconst actual = await read({edit: 'commit-msg-file', cwd});\n\tt.deepEqual(actual, expected);\n});\n\ntest('get edit commit message from git root', async t => {\n\tconst cwd = await git.bootstrap();\n\n\tawait sander.writeFile(cwd, 'alpha.txt', 'alpha');\n\tawait execa('git', ['add', '.'], {cwd});\n\tawait execa('git', ['commit', '-m', 'alpha'], {cwd});\n\tconst expected = ['alpha\\n\\n'];\n\tconst actual = await read({edit: true, cwd});\n\tt.deepEqual(actual, expected);\n});\n\ntest('get history commit messages', async t => {\n\tconst cwd = await git.bootstrap();\n\tawait sander.writeFile(cwd, 'alpha.txt', 'alpha');\n\tawait execa('git', ['add', 'alpha.txt'], {cwd});\n\tawait execa('git', ['commit', '-m', 'alpha'], {cwd});\n\tawait execa('git', ['rm', 'alpha.txt'], {cwd});\n\tawait execa('git', ['commit', '-m', 'remove alpha'], {cwd});\n\n\tconst expected = ['remove alpha\\n\\n', 'alpha\\n\\n'];\n\tconst actual = await read({cwd});\n\tt.deepEqual(actual, expected);\n});\n\ntest('get edit commit message from git subdirectory', async t => {\n\tconst cwd = await git.bootstrap();\n\tawait sander.mkdir(cwd, 'beta');\n\tawait sander.writeFile(cwd, 'beta/beta.txt', 'beta');\n\n\tawait execa('git', ['add', '.'], {cwd});\n\tawait execa('git', ['commit', '-m', 'beta'], {cwd});\n\n\tconst expected = ['beta\\n\\n'];\n\tconst actual = await read({edit: true, cwd});\n\tt.deepEqual(actual, expected);\n});\n"]}