'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _gitRawCommits = require('git-raw-commits');

var _gitRawCommits2 = _interopRequireDefault(_gitRawCommits);

var _sander = require('@marionebl/sander');

var sander = _interopRequireWildcard(_sander);

var _topLevel = require('@commitlint/top-level');

var _topLevel2 = _interopRequireDefault(_topLevel);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = getCommitMessages;

// Get commit messages
// Object => Promise<Array<String>>

function getCommitMessages(settings) {
	return new Promise(function ($return, $error) {
		var cwd = settings.cwd,
		    from = settings.from,
		    to = settings.to,
		    edit = settings.edit;


		if (edit) {
			return $return(getEditCommit(cwd, edit));
		}

		return $return(getHistoryCommits({ from, to }, { cwd }));
	}.bind(this));
}

// Get commit messages from history
// Object => Promise<string[]>
function getHistoryCommits(options) {
	var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	return new Promise(function (resolve, reject) {
		var data = [];
		(0, _gitRawCommits2.default)(options, { cwd: opts.cwd }).on('data', function (chunk) {
			return data.push(chunk.toString('utf-8'));
		}).on('error', reject).on('end', function () {
			resolve(data);
		});
	});
}

// Get recently edited commit message
// (cwd: string, edit: any) => Promise<Array<String>>
function getEditCommit(cwd, edit) {
	return new Promise(function ($return, $error) {
		var top, editFilePath, editFile;
		return Promise.resolve((0, _topLevel2.default)(cwd)).then(function ($await_1) {
			try {
				top = $await_1;

				if (typeof top !== 'string') {
					return $error(new TypeError(`Could not find git root from ${cwd}`));
				}

				editFilePath = typeof edit === 'string' ? _path2.default.resolve(top, edit) : _path2.default.join(top, '.git/COMMIT_EDITMSG');

				return Promise.resolve(sander.readFile(editFilePath)).then(function ($await_2) {
					try {
						editFile = $await_2;
						return $return([`${editFile.toString('utf-8')}\n`]);
					} catch ($boundEx) {
						return $error($boundEx);
					}
				}.bind(this), $error);
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
}
module.exports = exports['default'];
//# sourceMappingURL=index.js.map