'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

exports.default = resolveExtends;

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

require('resolve-global');

var _requireUncached = require('require-uncached');

var _requireUncached2 = _interopRequireDefault(_requireUncached);

var _resolveFrom = require('resolve-from');

var _resolveFrom2 = _interopRequireDefault(_resolveFrom);

var _lodash = require('lodash.merge');

var _lodash2 = _interopRequireDefault(_lodash);

var _lodash3 = require('lodash.omit');

var _lodash4 = _interopRequireDefault(_lodash3);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// Resolve extend configs
// eslint-disable-line import/no-unassigned-import
function resolveExtends() {
	var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	var e = config.extends;

	var extended = loadExtends(config, context).reduceRight(function (r, c) {
		return (0, _lodash2.default)(r, (0, _lodash4.default)(c, 'extends'));
	}, e ? { extends: e } : {});

	// Remove deprecation warning in version 3
	if (typeof config === 'object' && 'wildcards' in config) {
		console.warn(`'wildcards' found in top-level configuration ignored. Remove them from your config to silence this warning.`);
	}

	return (0, _lodash2.default)({}, extended, config);
}

// (any, string, string, Function) => any[];
function loadExtends() {
	var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
	var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	return (config.extends || []).reduce(function (configs, raw) {
		var load = context.require || require;
		var resolved = resolveConfig(raw, context);
		var c = load(resolved);
		var cwd = _path2.default.dirname(resolved);

		// Remove deprecation warning in version 3
		if (typeof c === 'object' && 'wildcards' in c) {
			console.warn(`'wildcards' found in '${raw}' ignored. To silence this warning raise an issue at 'npm repo ${raw}' to remove the wildcards.`);
		}

		var ctx = (0, _lodash2.default)({}, context, { cwd });

		// Resolve parser preset if none was present before
		if (!context.parserPreset && typeof c === 'object' && typeof c.parserPreset === 'string') {
			var resolvedParserPreset = (0, _resolveFrom2.default)(cwd, c.parserPreset);
			var parserPreset = {
				name: c.parserPreset,
				path: `./${_path2.default.relative(process.cwd(), resolvedParserPreset)}`.split(_path2.default.sep).join('/'),
				parserOpts: require(resolvedParserPreset)
			};

			ctx.parserPreset = parserPreset;
			config.parserPreset = parserPreset;
		}

		return [].concat((0, _toConsumableArray3.default)(configs), [c], (0, _toConsumableArray3.default)(loadExtends(c, ctx)));
	}, []);
}

function getId() {
	var raw = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
	var prefix = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

	var first = raw.charAt(0);
	var scoped = first === '@';
	var relative = first === '.';
	return scoped || relative ? raw : [prefix, raw].filter(String).join('-');
}

function resolveConfig(raw) {
	var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	var resolve = context.resolve || resolveId;
	var id = getId(raw, context.prefix);

	try {
		return resolve(id, context);
	} catch (err) {
		var legacy = getId(raw, 'conventional-changelog-lint-config');
		var resolved = resolve(legacy, context);
		console.warn(`Resolving ${raw} to legacy config ${legacy}. To silence this warning raise an issue at 'npm repo ${legacy}' to rename to ${id}.`);
		return resolved;
	}
}

function resolveId(id) {
	var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	var cwd = context.cwd || process.cwd();
	var localPath = _resolveFrom2.default.silent(cwd, id);

	if (typeof localPath === 'string') {
		return localPath;
	}

	var resolveGlobal = (0, _requireUncached2.default)('resolve-global');
	var globalPath = resolveGlobal.silent(id);

	if (typeof globalPath === 'string') {
		return globalPath;
	}

	var err = new Error(`Cannot find module "${id}" from "${cwd}"`);
	err.code = 'MODULE_NOT_FOUND';
	throw err;
}
module.exports = exports['default'];
//# sourceMappingURL=index.js.map