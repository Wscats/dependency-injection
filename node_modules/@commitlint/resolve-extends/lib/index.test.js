'use strict';

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _execa = require('execa');

var _execa2 = _interopRequireDefault(_execa);

var _test = require('@commitlint/test');

var _sander = require('@marionebl/sander');

var sander = _interopRequireWildcard(_sander);

var _ = require('.');

var _2 = _interopRequireDefault(_);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var id = function id(_id) {
	return _id;
};

(0, _ava2.default)('returns empty object when called without params', function (t) {
	var actual = (0, _2.default)();
	t.deepEqual(actual, {});
});

(0, _ava2.default)('returns an equivalent object as passed in', function (t) {
	var expected = { foo: 'bar' };
	var actual = (0, _2.default)(expected);
	t.deepEqual(actual, expected);
});

_ava2.default.serial('falls back to global install', function (t) {
	return new Promise(function ($return, $error) {
		var prev, cwd, prefix, npm, expected;

		prev = process.env.PREFIX;

		return Promise.resolve(_test.fix.bootstrap('fixtures/global-install')).then(function ($await_1) {
			try {
				cwd = $await_1;
				prefix = `${cwd}/commitlint-npm-packages`;

				npm = function npm(args) {
					return (0, _execa2.default)('npm', args, { cwd });
				};

				return Promise.resolve(sander.mkdir(cwd, 'commitlint-npm-packages')).then(function ($await_2) {
					try {

						process.env.PREFIX = prefix;

						return Promise.resolve(npm(['install', '--global', '@commitlint/config-angular', '--prefix', prefix])).then(function ($await_3) {
							try {

								expected = { extends: ['@commitlint/config-angular'] };
								t.notThrows(function () {
									return (0, _2.default)(expected);
								});

								process.env.PREFIX = prev;
								return $return();
							} catch ($boundEx) {
								return $error($boundEx);
							}
						}.bind(this), $error);
					} catch ($boundEx) {
						return $error($boundEx);
					}
				}.bind(this), $error);
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

_ava2.default.serial('fails for missing extends', function (t) {
	return new Promise(function ($return, $error) {
		var prev, cwd, prefix, input;

		prev = process.env.PREFIX;

		return Promise.resolve(_test.fix.bootstrap('fixtures/missing-install')).then(function ($await_4) {
			try {
				cwd = $await_4;
				prefix = `${cwd}/commitlint-npm-packages`;

				process.env.PREFIX = prefix;

				input = { extends: ['@commitlint/foo-bar'] };

				t.throws(function () {
					return (0, _2.default)(input, { cwd });
				}, /Cannot find module "@commitlint\/foo-bar" from/);

				process.env.PREFIX = prev;
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('uses empty prefix by default', function (t) {
	var input = { extends: ['extender-name'] };

	(0, _2.default)(input, {
		resolve: id,
		require(id) {
			t.is(id, 'extender-name');
		}
	});
});

(0, _ava2.default)('uses prefix as configured', function (t) {
	var input = { extends: ['extender-name'] };

	(0, _2.default)(input, {
		prefix: 'prefix',
		resolve: id,
		require(id) {
			t.is(id, 'prefix-extender-name');
		}
	});
});

(0, _ava2.default)('ignores prefix for scoped extends', function (t) {
	var input = { extends: ['@scope/extender-name'] };

	(0, _2.default)(input, {
		prefix: 'prefix',
		resolve: id,
		require(id) {
			t.is(id, '@scope/extender-name');
		}
	});
});

(0, _ava2.default)('ignores prefix for relative extends', function (t) {
	var input = { extends: ['./extender'] };

	(0, _2.default)(input, {
		prefix: 'prefix',
		resolve: id,
		require(id) {
			t.is(id, './extender');
		}
	});
});

(0, _ava2.default)('propagates return value of require function', function (t) {
	var input = { extends: ['extender-name'] };
	var propagated = { foo: 'bar' };

	var actual = (0, _2.default)(input, {
		resolve: id,
		require() {
			return propagated;
		}
	});

	t.is(actual.foo, 'bar');
});

(0, _ava2.default)('resolves extends recursively', function (t) {
	var input = { extends: ['extender-name'] };
	var actual = [];

	(0, _2.default)(input, {
		resolve: id,
		require(id) {
			actual.push(id);
			if (id === 'extender-name') {
				return { extends: ['recursive-extender-name'] };
			}
			if (id === 'recursive-extender-name') {
				return { foo: 'bar' };
			}
		}
	});

	t.deepEqual(actual, ['extender-name', 'recursive-extender-name']);
});

(0, _ava2.default)('uses prefix key recursively', function (t) {
	var input = { extends: ['extender-name'] };
	var actual = [];

	(0, _2.default)(input, {
		prefix: 'prefix',
		resolve: id,
		require(id) {
			actual.push(id);
			if (id === 'prefix-extender-name') {
				return { extends: ['recursive-extender-name'] };
			}
			if (id === 'prefix-recursive-extender-name') {
				return { foo: 'bar' };
			}
		}
	});

	t.deepEqual(actual, ['prefix-extender-name', 'prefix-recursive-extender-name']);
});

(0, _ava2.default)('propagates contents recursively', function (t) {
	var input = { extends: ['extender-name'] };

	var actual = (0, _2.default)(input, {
		resolve: id,
		require(id) {
			if (id === 'extender-name') {
				return { extends: ['recursive-extender-name'], foo: 'bar' };
			}
			if (id === 'recursive-extender-name') {
				return { baz: 'bar' };
			}
		}
	});

	var expected = {
		extends: ['extender-name'],
		foo: 'bar',
		baz: 'bar'
	};

	t.deepEqual(actual, expected);
});

(0, _ava2.default)('extending contents should take precedence', function (t) {
	var input = { extends: ['extender-name'], zero: 'root' };

	var actual = (0, _2.default)(input, {
		resolve: id,
		require(id) {
			if (id === 'extender-name') {
				return { extends: ['recursive-extender-name'], zero: id, one: id };
			}
			if (id === 'recursive-extender-name') {
				return {
					extends: ['second-recursive-extender-name'],
					zero: id,
					one: id,
					two: id
				};
			}
			if (id === 'second-recursive-extender-name') {
				return { zero: id, one: id, two: id, three: id };
			}
		}
	});

	var expected = {
		extends: ['extender-name'],
		zero: 'root',
		one: 'extender-name',
		two: 'recursive-extender-name',
		three: 'second-recursive-extender-name'
	};

	t.deepEqual(actual, expected);
});

(0, _ava2.default)('should fall back to conventional-changelog-lint-config prefix', function (t) {
	var input = { extends: ['extender-name'] };

	var actual = (0, _2.default)(input, {
		prefix: 'prefix',
		resolve(id) {
			if (id === 'conventional-changelog-lint-config-extender-name') {
				return 'conventional-changelog-lint-config-extender-name';
			}
			throw new Error(`Could not find module "*${id}"`);
		},
		require(id) {
			if (id === 'conventional-changelog-lint-config-extender-name') {
				return {
					rules: {
						fallback: true
					}
				};
			}
		}
	});

	t.deepEqual(actual, {
		extends: ['extender-name'],
		rules: {
			fallback: true
		}
	});
});
//# sourceMappingURL=index.test.js.map