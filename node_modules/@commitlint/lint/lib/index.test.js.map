{"version":3,"sources":["../src/index.test.js"],"names":["t","throws","error","is","message","actual","true","valid","false","input","parserOpts","headerPattern","foo","bar","indexOf","length","notThrows","report","issuePrefixes","expected","commentChar"],"mappings":";;AAAA;;;;AACA;;;;;;AAEA,mBAAK,uBAAL,EAA8B,UAAMA,CAAN;AAAA;AAAA,MACvB,KADuB;AACf,yBAAMA,EAAEC,MAAF,CAAS,iBAAT,CAAN;AAAA;AAARC,SAAN,GAAc,QAAd;AACAF,MAAEG,EAAF,CAAKD,MAAME,OAAX,EAAoB,uBAApB;AADc;AAAA;AAAA;AAAA;AAAA;AADe;AAAA,CAA9B;;AAKA,mBAAK,2BAAL,EAAkC,UAAMJ,CAAN;AAAA;AAAA,MAC3B,KAD2B;AACnB,yBAAMA,EAAEC,MAAF,CAAS,gBAAK,EAAL,CAAT,CAAN;AAAA;AAARC,SAAN,GAAc,QAAd;AACAF,MAAEG,EAAF,CAAKD,MAAME,OAAX,EAAoB,uBAApB;AADc;AAAA;AAAA;AAAA;AAAA;AADmB;AAAA,CAAlC;;AAKA,mBAAK,sCAAL,EAA6C,UAAMJ,CAAN;AAAA;AAAA,MACtC,MADsC;AAC7B,yBAAM,gBAAK,UAAL,CAAN;AAAA;AAATK,UAAN,GAAe,QAAf;AACAL,MAAEM,IAAF,CAAOD,OAAOE,KAAd;AADe;AAAA;AAAA;AAAA;AAAA;AAD6B;AAAA,CAA7C;;AAKA,mBAAK,2CAAL,EAAkD,UAAMP,CAAN;AAAA;AAAA,MAC3C,MAD2C;AAClC,yBAAM,gBAAK,UAAL,EAAiB;AACrC,gBAAa,CAAC,CAAD,EAAI,QAAJ,EAAc,CAAC,KAAD,CAAd;AADwB,GAAjB,CAAN;AAAA;AAATK,UAAN,GAAe,QAAf;AAGAL,MAAEM,IAAF,CAAOD,OAAOE,KAAd;AAHe;AAAA;AAAA;AAAA;AAAA;AADkC;AAAA,CAAlD;;AAOA,mBAAK,0CAAL,EAAiD,UAAMP,CAAN;AAAA;AAAA,MAC1C,MAD0C;AACjC,yBAAM,gBAAK,UAAL,EAAiB;AACrC,gBAAa,CAAC,CAAD,EAAI,OAAJ,EAAa,CAAC,KAAD,CAAb;AADwB,GAAjB,CAAN;AAAA;AAATK,UAAN,GAAe,QAAf;AAGAL,MAAEQ,KAAF,CAAQH,OAAOE,KAAf;AAHe;AAAA;AAAA;AAAA;AAAA;AADiC;AAAA,CAAjD;;AAOA,mBAAK,6CAAL,EAAoD,UAAMP,CAAN;AAAA;AAAA,MAC7C,MAD6C;AACpC,yBAAM,gBAAK,4BAAL,EAAmC;AACvD,iBAAc,CAAC,CAAD,EAAI,OAAJ;AADyC,GAAnC,CAAN;AAAA;AAATK,UAAN,GAAe,QAAf;AAGAL,MAAEM,IAAF,CAAOD,OAAOE,KAAd;AACAP,MAAEG,EAAF,CAAKE,OAAOI,KAAZ,EAAmB,4BAAnB;AAJe;AAAA;AAAA;AAAA;AAAA;AADoC;AAAA,CAApD;;AAQA,mBAAK,mCAAL,EAA0C,UAAMT,CAAN;AAAA;AAAA,MACnC,MADmC;AAC1B,yBAAM,gBACpB,SADoB,EAEpB;AACC,gBAAa,CAAC,CAAD,EAAI,QAAJ,EAAc,CAAC,KAAD,CAAd,CADd;AAEC,iBAAc,CAAC,CAAD,EAAI,OAAJ;AAFf,GAFoB,EAMpB;AACCU,eAAY;AACXC,mBAAe;AADJ;AADb,GANoB,CAAN;AAAA;AAATN,UAAN,GAAe,QAAf;AAYAL,MAAEM,IAAF,CAAOD,OAAOE,KAAd;AAZe;AAAA;AAAA;AAAA;AAAA;AAD0B;AAAA,CAA1C;;AAgBA,mBAAK,+BAAL,EAAsC,UAAMP,CAAN;AAAA;AAAA,MAC/B,KAD+B;AACvB,yBAAMA,EAAEC,MAAF,CACnB,gBAAK,KAAL,EAAY,EAACW,KAAK,CAAC,CAAD,EAAI,QAAJ,CAAN,EAAqBC,KAAK,CAAC,CAAD,EAAI,OAAJ,CAA1B,EAAZ,CADmB,CAAN;AAAA;AAARX,SAAN,GAAc,QAAd;;AAIAF,MAAEG,EAAF,CAAKD,MAAME,OAAN,CAAcU,OAAd,CAAsB,oCAAtB,CAAL,EAAkE,CAAlE;AAJc;AAAA;AAAA;AAAA;AAAA;AADuB;AAAA,CAAtC;;AAQA,mBAAK,gCAAL,EAAuC,UAAMd,CAAN;AAAA;AAAA,MAChC,KADgC;AACxB,yBAAMA,EAAEC,MAAF,CACnB,gBAAK,kBAAL,EAAyB;AACxB,gBAAa,CADW;AAExB,iBAAc,EAAC,GAAG,CAAJ,EAAO,GAAG,OAAV,EAAmB,GAAG,CAAC,KAAD,CAAtB,EAA+Bc,QAAQ,CAAvC;AAFU,GAAzB,CADmB,CAAN;AAAA;AAARb,SAAN,GAAc,QAAd;;AAOAF,MAAEM,IAAF,CAAOJ,MAAME,OAAN,CAAcU,OAAd,CAAsB,yBAAtB,IAAmD,CAAC,CAA3D;AACAd,MAAEM,IAAF,CAAOJ,MAAME,OAAN,CAAcU,OAAd,CAAsB,0BAAtB,IAAoD,CAAC,CAA5D;AARc;AAAA;AAAA;AAAA;AAAA;AADwB;AAAA,CAAvC;;AAYA,mBAAK,0BAAL,EAAiC,UAAMd,CAAN;AAAA;AAChC,yBAAMA,EAAEgB,SAAF,CAAY,gBAAK,KAAL,EAAY,EAAC,aAAa,CAAC,CAAD,CAAd,EAAmB,cAAc,CAAC,CAAD,CAAjC,EAAZ,CAAZ,CAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADgC;AAAA,CAAjC;;AAIA,mBAAK,qCAAL,EAA4C,UAAMhB,CAAN;AAAA;AAAA,MACrC,KADqC;AAC7B,yBAAMA,EAAEC,MAAF,CACnB,gBAAK,kBAAL,EAAyB,EAAC,cAAc,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,CAAf,EAAzB,CADmB,CAAN;AAAA;AAARC,SAAN,GAAc,SAAd;;AAIAF,MAAEM,IAAF,CAAOJ,MAAME,OAAN,CAAcU,OAAd,CAAsB,sCAAtB,IAAgE,CAAC,CAAxE;AAJc;AAAA;AAAA;AAAA;AAAA;AAD6B;AAAA,CAA5C;;AAQA,mBAAK,oCAAL,EAA2C,UAAMd,CAAN;AAAA;AAAA,MACpC,KADoC;AAC5B,yBAAMA,EAAEC,MAAF,CACnB,gBAAK,kBAAL,EAAyB;AACxB,gBAAa,CAAC,GAAD,EAAM,QAAN,CADW;AAExB,wBAAqB,CAAC,EAAD,EAAK,QAAL;AAFG,GAAzB,CADmB,CAAN;AAAA;AAARC,SAAN,GAAc,SAAd;;AAOAF,MAAEM,IAAF,CAAOJ,MAAME,OAAN,CAAcU,OAAd,CAAsB,+BAAtB,IAAyD,CAAC,CAAjE;AACAd,MAAEM,IAAF,CAAOJ,MAAME,OAAN,CAAcU,OAAd,CAAsB,+BAAtB,IAAyD,CAAC,CAAjE;AARc;AAAA;AAAA;AAAA;AAAA;AAD4B;AAAA,CAA3C;;AAYA,mBAAK,yCAAL,EAAgD,UAAMd,CAAN;AAAA;AAAA,MACzC,KADyC;AACjC,yBAAMA,EAAEC,MAAF,CACnB,gBAAK,kBAAL,EAAyB;AACxB,gBAAa,CAAC,CAAC,CAAF,EAAK,QAAL,CADW;AAExB,wBAAqB,CAAC,CAAD,EAAI,QAAJ;AAFG,GAAzB,CADmB,CAAN;AAAA;AAARC,SAAN,GAAc,SAAd;;AAOAF,MAAEM,IAAF,CAAOJ,MAAME,OAAN,CAAcU,OAAd,CAAsB,wCAAtB,IAAkE,CAAC,CAA1E;AACAd,MAAEM,IAAF,CAAOJ,MAAME,OAAN,CAAcU,OAAd,CAAsB,wCAAtB,IAAkE,CAAC,CAA1E;AARc;AAAA;AAAA;AAAA;AAAA;AADiC;AAAA,CAAhD;;AAYA,mBAAK,wCAAL,EAA+C,UAAMd,CAAN;AAAA;AAAA,MACxC,KADwC;AAChC,yBAAMA,EAAEC,MAAF,CACnB,gBAAK,kBAAL,EAAyB;AACxB,gBAAa,CAAC,CAAD,EAAI,CAAJ,CADW;AAExB,wBAAqB,CAAC,CAAD,EAAI,EAAJ;AAFG,GAAzB,CADmB,CAAN;AAAA;AAARC,SAAN,GAAc,SAAd;;AAOAF,MAAEM,IAAF,CAAOJ,MAAME,OAAN,CAAcU,OAAd,CAAsB,0BAAtB,IAAoD,CAAC,CAA5D;AACAd,MAAEM,IAAF,CAAOJ,MAAME,OAAN,CAAcU,OAAd,CAAsB,kCAAtB,IAA4D,CAAC,CAApE;AARc;AAAA;AAAA;AAAA;AAAA;AADgC;AAAA,CAA/C;;AAYA,mBAAK,6CAAL,EAAoD,UAAMd,CAAN;AAAA;AAAA,MAC7C,KAD6C;AACrC,yBAAMA,EAAEC,MAAF,CACnB,gBAAK,kBAAL,EAAyB;AACxB,gBAAa,CAAC,CAAD,EAAI,KAAJ,CADW;AAExB,wBAAqB,CAAC,CAAD,EAAI,KAAJ;AAFG,GAAzB,CADmB,CAAN;AAAA;AAARC,SAAN,GAAc,SAAd;;AAOAF,MAAEM,IAAF,CAAOJ,MAAME,OAAN,CAAcU,OAAd,CAAsB,uCAAtB,IAAiE,CAAC,CAAzE;AACAd,MAAEM,IAAF,CACCJ,MAAME,OAAN,CAAcU,OAAd,CAAsB,+CAAtB,IAAyE,CAAC,CAD3E;AARc;AAAA;AAAA;AAAA;AAAA;AADqC;AAAA,CAApD;;AAcA,mBAAK,mBAAL,EAA0B,UAAMd,CAAN;AAAA;AAAA,MACnB,MADmB;AACV,yBAAM,gBAAK,cAAL,EAAqB;AACzC,uBAAoB,CAAC,CAAD,EAAI,OAAJ;AADqB,GAArB,CAAN;AAAA;AAATiB,UAAN,GAAe,SAAf;;AAIAjB,MAAEM,IAAF,CAAOW,OAAOV,KAAd;AAJe;AAAA;AAAA;AAAA;AAAA;AADU;AAAA,CAA1B;;AAQA,mBAAK,iBAAL,EAAwB,UAAMP,CAAN;AAAA;AAAA,MACjB,MADiB;AACR,yBAAM,gBAAK,cAAL,EAAqB;AACzC,uBAAoB,CAAC,CAAD,EAAI,QAAJ;AADqB,GAArB,CAAN;AAAA;AAATiB,UAAN,GAAe,SAAf;;AAIAjB,MAAEQ,KAAF,CAAQS,OAAOV,KAAf;AAJe;AAAA;AAAA;AAAA;AAAA;AADQ;AAAA,CAAxB;;AAQA,mBAAK,iCAAL,EAAwC,UAAMP,CAAN;AAAA;AAAA,MACjC,MADiC;AACxB,yBAAM,gBACpB,iBADoB,EAEpB;AACC,uBAAoB,CAAC,CAAD,EAAI,OAAJ;AADrB,GAFoB,EAKpB;AACCU,eAAY;AACXQ,mBAAe,CAAC,MAAD;AADJ;AADb,GALoB,CAAN;AAAA;AAATD,UAAN,GAAe,SAAf;;AAYAjB,MAAEM,IAAF,CAAOW,OAAOV,KAAd;AAZe;AAAA;AAAA;AAAA;AAAA;AADwB;AAAA,CAAxC;;AAgBA,mBAAK,+BAAL,EAAsC,UAAMP,CAAN;AAAA;AAAA,MAC/B,MAD+B;AACtB,yBAAM,gBACpB,cADoB,EAEpB;AACC,uBAAoB,CAAC,CAAD,EAAI,OAAJ;AADrB,GAFoB,EAKpB;AACCU,eAAY;AACXQ,mBAAe,CAAC,MAAD;AADJ;AADb,GALoB,CAAN;AAAA;AAATD,UAAN,GAAe,SAAf;;AAYAjB,MAAEQ,KAAF,CAAQS,OAAOV,KAAf;AAZe;AAAA;AAAA;AAAA;AAAA;AADsB;AAAA,CAAtC;;AAgBA,mBAAK,kDAAL,EAAyD,UAAMP,CAAN;AAAA;AAAA,MAClD,OADkD,EAElD,MAFkD;;AAClDI,SAAN,GAAgB,UAAhB;AACe,yBAAM,gBAAKA,OAAL,CAAN;AAAA;AAATa,UAAN,GAAe,SAAf;;AAEAjB,MAAEG,EAAF,CAAKc,OAAOR,KAAZ,EAAmBL,OAAnB;AAFe;AAAA;AAAA;AAAA;AAAA;AAFyC;AAAA,CAAzD;;AAOA,mBAAK,sDAAL,EAA6D,UAAMJ,CAAN;AAAA;AAAA,MACtD,OADsD,EAEtD,MAFsD;;AACtDI,SAAN,GAAgB,gCAAhB;AACe,yBAAM,gBAAKA,OAAL,CAAN;AAAA;AAATa,UAAN,GAAe,SAAf;;AAEAjB,MAAEG,EAAF,CAAKc,OAAOR,KAAZ,EAAmBL,OAAnB;AAFe;AAAA;AAAA;AAAA;AAAA;AAF6C;AAAA,CAA7D;;AAOA,mBAAK,8DAAL,EAAqE,UAAMJ,CAAN;AAAA;AAAA,MAC9D,OAD8D,EAE9D,MAF8D;;AAC9DI,SAAN,GAAgB,6CAAhB;AACe,yBAAM,gBAAKA,OAAL,CAAN;AAAA;AAATa,UAAN,GAAe,SAAf;;AAEAjB,MAAEG,EAAF,CAAKc,OAAOR,KAAZ,EAAmBL,OAAnB;AAFe;AAAA;AAAA;AAAA;AAAA;AAFqD;AAAA,CAArE;;AAOA,mBAAK,gFAAL,EAAuF,UAAMJ,CAAN;AAAA;AAAA,MAChF,QADgF,EAEhF,OAFgF,EAGhF,MAHgF;;AAChFmB,UAAN,GAAiB,6CAAjB;AACMf,SAAN,GAAiB,GAAEe,QAAS,8BAA5B;AACe,yBAAM,gBACpBf,OADoB,EAEpB;AACC,uBAAoB,CAAC,CAAD,EAAI,OAAJ;AADrB,GAFoB,EAKpB;AACCM,eAAY;AACXU,iBAAa;AADF;AADb,GALoB,CAAN;AAAA;AAATH,UAAN,GAAe,SAAf;;AAYAjB,MAAEG,EAAF,CAAKc,OAAOR,KAAZ,EAAmBU,QAAnB;AAZe;AAAA;AAAA;AAAA;AAAA;AAHuE;AAAA,CAAvF","file":"index.test.js","sourcesContent":["import test from 'ava';\nimport lint from '.';\n\ntest('throws without params', async t => {\n\tconst error = await t.throws(lint());\n\tt.is(error.message, 'Expected a raw commit');\n});\n\ntest('throws with empty message', async t => {\n\tconst error = await t.throws(lint(''));\n\tt.is(error.message, 'Expected a raw commit');\n});\n\ntest('positive on stub message and no rule', async t => {\n\tconst actual = await lint('foo: bar');\n\tt.true(actual.valid);\n});\n\ntest('positive on stub message and adhered rule', async t => {\n\tconst actual = await lint('foo: bar', {\n\t\t'type-enum': [2, 'always', ['foo']]\n\t});\n\tt.true(actual.valid);\n});\n\ntest('negative on stub message and broken rule', async t => {\n\tconst actual = await lint('foo: bar', {\n\t\t'type-enum': [2, 'never', ['foo']]\n\t});\n\tt.false(actual.valid);\n});\n\ntest('positive on ignored message and broken rule', async t => {\n\tconst actual = await lint('Revert \"some bogus commit\"', {\n\t\t'type-empty': [2, 'never']\n\t});\n\tt.true(actual.valid);\n\tt.is(actual.input, 'Revert \"some bogus commit\"');\n});\n\ntest('positive on stub message and opts', async t => {\n\tconst actual = await lint(\n\t\t'foo-bar',\n\t\t{\n\t\t\t'type-enum': [2, 'always', ['foo']],\n\t\t\t'type-empty': [2, 'never']\n\t\t},\n\t\t{\n\t\t\tparserOpts: {\n\t\t\t\theaderPattern: /^(\\w*)(?:\\((.*)\\))?-(.*)$/\n\t\t\t}\n\t\t}\n\t);\n\tt.true(actual.valid);\n});\n\ntest('throws for invalid rule names', async t => {\n\tconst error = await t.throws(\n\t\tlint('foo', {foo: [2, 'always'], bar: [1, 'never']})\n\t);\n\n\tt.is(error.message.indexOf('Found missing rule names: foo, bar'), 0);\n});\n\ntest('throws for invalid rule config', async t => {\n\tconst error = await t.throws(\n\t\tlint('type(scope): foo', {\n\t\t\t'type-enum': 1,\n\t\t\t'scope-enum': {0: 2, 1: 'never', 2: ['foo'], length: 3}\n\t\t})\n\t);\n\n\tt.true(error.message.indexOf('type-enum must be array') > -1);\n\tt.true(error.message.indexOf('scope-enum must be array') > -1);\n});\n\ntest('allows disable shorthand', async t => {\n\tawait t.notThrows(lint('foo', {'type-enum': [0], 'scope-enum': [0]}));\n});\n\ntest('throws for rule with invalid length', async t => {\n\tconst error = await t.throws(\n\t\tlint('type(scope): foo', {'scope-enum': [1, 2, 3, 4]})\n\t);\n\n\tt.true(error.message.indexOf('scope-enum must be 2 or 3 items long') > -1);\n});\n\ntest('throws for rule with invalid level', async t => {\n\tconst error = await t.throws(\n\t\tlint('type(scope): foo', {\n\t\t\t'type-enum': ['2', 'always'],\n\t\t\t'header-max-length': [{}, 'always']\n\t\t})\n\t);\n\n\tt.true(error.message.indexOf('rule type-enum must be number') > -1);\n\tt.true(error.message.indexOf('rule type-enum must be number') > -1);\n});\n\ntest('throws for rule with out of range level', async t => {\n\tconst error = await t.throws(\n\t\tlint('type(scope): foo', {\n\t\t\t'type-enum': [-1, 'always'],\n\t\t\t'header-max-length': [3, 'always']\n\t\t})\n\t);\n\n\tt.true(error.message.indexOf('rule type-enum must be between 0 and 2') > -1);\n\tt.true(error.message.indexOf('rule type-enum must be between 0 and 2') > -1);\n});\n\ntest('throws for rule with invalid condition', async t => {\n\tconst error = await t.throws(\n\t\tlint('type(scope): foo', {\n\t\t\t'type-enum': [1, 2],\n\t\t\t'header-max-length': [1, {}]\n\t\t})\n\t);\n\n\tt.true(error.message.indexOf('type-enum must be string') > -1);\n\tt.true(error.message.indexOf('header-max-length must be string') > -1);\n});\n\ntest('throws for rule with out of range condition', async t => {\n\tconst error = await t.throws(\n\t\tlint('type(scope): foo', {\n\t\t\t'type-enum': [1, 'foo'],\n\t\t\t'header-max-length': [1, 'bar']\n\t\t})\n\t);\n\n\tt.true(error.message.indexOf('type-enum must be \"always\" or \"never\"') > -1);\n\tt.true(\n\t\terror.message.indexOf('header-max-length must be \"always\" or \"never\"') > -1\n\t);\n});\n\ntest('succeds for issue', async t => {\n\tconst report = await lint('somehting #1', {\n\t\t'references-empty': [2, 'never']\n\t});\n\n\tt.true(report.valid);\n});\n\ntest('fails for issue', async t => {\n\tconst report = await lint('somehting #1', {\n\t\t'references-empty': [2, 'always']\n\t});\n\n\tt.false(report.valid);\n});\n\ntest('succeds for custom issue prefix', async t => {\n\tconst report = await lint(\n\t\t'somehting REF-1',\n\t\t{\n\t\t\t'references-empty': [2, 'never']\n\t\t},\n\t\t{\n\t\t\tparserOpts: {\n\t\t\t\tissuePrefixes: ['REF-']\n\t\t\t}\n\t\t}\n\t);\n\n\tt.true(report.valid);\n});\n\ntest('fails for custom issue prefix', async t => {\n\tconst report = await lint(\n\t\t'somehting #1',\n\t\t{\n\t\t\t'references-empty': [2, 'never']\n\t\t},\n\t\t{\n\t\t\tparserOpts: {\n\t\t\t\tissuePrefixes: ['REF-']\n\t\t\t}\n\t\t}\n\t);\n\n\tt.false(report.valid);\n});\n\ntest('returns original message only with commit header', async t => {\n\tconst message = 'foo: bar';\n\tconst report = await lint(message);\n\n\tt.is(report.input, message);\n});\n\ntest('returns original message with commit header and body', async t => {\n\tconst message = 'foo: bar/n/nFoo bar bizz buzz.';\n\tconst report = await lint(message);\n\n\tt.is(report.input, message);\n});\n\ntest('returns original message with commit header, body and footer', async t => {\n\tconst message = 'foo: bar/n/nFoo bar bizz buzz./n/nCloses #1';\n\tconst report = await lint(message);\n\n\tt.is(report.input, message);\n});\n\ntest('returns original message with commit header, body and footer, parsing comments', async t => {\n\tconst expected = 'foo: bar/n/nFoo bar bizz buzz./n/nCloses #1';\n\tconst message = `${expected}\\n\\n# Some comment to ignore`;\n\tconst report = await lint(\n\t\tmessage,\n\t\t{\n\t\t\t'references-empty': [2, 'never']\n\t\t},\n\t\t{\n\t\t\tparserOpts: {\n\t\t\t\tcommentChar: '#'\n\t\t\t}\n\t\t}\n\t);\n\n\tt.is(report.input, expected);\n});\n"]}