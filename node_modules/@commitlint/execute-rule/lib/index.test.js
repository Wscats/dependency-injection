'use strict';

var _ava = require('ava');

var _ava2 = _interopRequireDefault(_ava);

var _ = require('.');

var _2 = _interopRequireDefault(_);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

(0, _ava2.default)('does nothing without params', function (t) {
	return new Promise(function ($return, $error) {
		var actual;
		return Promise.resolve((0, _2.default)()).then(function ($await_1) {
			try {
				actual = $await_1;
				t.is(actual, null);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('returns plain config', function (t) {
	return new Promise(function ($return, $error) {
		var actual;
		return Promise.resolve((0, _2.default)(['name', 'config'])).then(function ($await_2) {
			try {
				actual = $await_2;
				t.deepEqual(actual, ['name', 'config']);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('unwraps promised config', function (t) {
	return new Promise(function ($return, $error) {
		var actual;
		return Promise.resolve((0, _2.default)(['name', Promise.resolve('config')])).then(function ($await_3) {
			try {
				actual = $await_3;
				t.deepEqual(actual, ['name', 'config']);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('executes config functions', function (t) {
	return new Promise(function ($return, $error) {
		var actual;
		return Promise.resolve((0, _2.default)(['name', function () {
			return 'config';
		}])).then(function ($await_4) {
			try {
				actual = $await_4;
				t.deepEqual(actual, ['name', 'config']);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});

(0, _ava2.default)('executes async config functions', function (t) {
	return new Promise(function ($return, $error) {
		var actual;
		return Promise.resolve((0, _2.default)(['name', function () {
			return new Promise(function ($return, $error) {
				return $return('config');
			}.bind(this));
		}])).then(function ($await_5) {
			try {
				actual = $await_5;
				t.deepEqual(actual, ['name', 'config']);
				return $return();
			} catch ($boundEx) {
				return $error($boundEx);
			}
		}.bind(this), $error);
	}.bind(this));
});
//# sourceMappingURL=index.test.js.map