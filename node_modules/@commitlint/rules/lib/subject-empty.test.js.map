{"version":3,"sources":["../src/subject-empty.test.js"],"names":["messages","empty","filled","parsed","t","actual","expected","is"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,WAAW;AAChBC,QAAO,cADS;AAEhBC,SAAQ;AAFQ,CAAjB;;AAKA,IAAMC,SAAS;AACdF,QAAO,qBAAMD,SAASC,KAAf,CADO;AAEdC,SAAQ,qBAAMF,SAASE,MAAf;AAFM,CAAf;;AAKA,mBAAK,kDAAL,EAAyD,UAAME,CAAN;AAAA;AAAA,6CAElD,QAFkD;;AAC1B,yBAAMD,OAAOF,KAAb;AAAA;AAAA,oBAAb,6BAAa,QAAb,CAAa,mEAAvBI,MAAuB;;AACxBC,YAAN,GAAiB,IAAjB;AACAF,MAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAF8B;AAAA;AAAA;AAAA;AAAA;AAD0B;AAAA,CAAzD;;AAMA,mBAAK,yCAAL,EAAgD,UAAMF,CAAN;AAAA;AAAA,8CAEzC,QAFyC;;AACjB,yBAAMD,OAAOF,KAAb;AAAA;AAAA,qBAAb,6BAAa,QAAb,EAAiC,OAAjC,CAAa,oEAAvBI,MAAuB;;AACxBC,YAAN,GAAiB,KAAjB;AACAF,MAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAF8B;AAAA;AAAA;AAAA;AAAA;AADiB;AAAA,CAAhD;;AAMA,mBAAK,6CAAL,EAAoD,UAAMF,CAAN;AAAA;AAAA,8CAE7C,QAF6C;;AACrB,yBAAMD,OAAOF,KAAb;AAAA;AAAA,qBAAb,6BAAa,QAAb,EAAiC,QAAjC,CAAa,oEAAvBI,MAAuB;;AACxBC,YAAN,GAAiB,IAAjB;AACAF,MAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAF8B;AAAA;AAAA;AAAA;AAAA;AADqB;AAAA,CAApD;;AAMA,mBAAK,qCAAL,EAA4C,UAAMF,CAAN;AAAA;AAAA,8CAErC,QAFqC;;AACb,yBAAMD,OAAOD,MAAb;AAAA;AAAA,qBAAb,6BAAa,QAAb,CAAa,oEAAvBG,MAAuB;;AACxBC,YAAN,GAAiB,KAAjB;AACAF,MAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAF8B;AAAA;AAAA;AAAA;AAAA;AADa;AAAA,CAA5C;;AAMA,mBAAK,kCAAL,EAAyC,UAAMF,CAAN;AAAA;AAAA,+CAElC,QAFkC;;AACV,yBAAMD,OAAOD,MAAb;AAAA;AAAA,qBAAb,6BAAa,QAAb,EAAkC,OAAlC,CAAa,qEAAvBG,MAAuB;;AACxBC,YAAN,GAAiB,IAAjB;AACAF,MAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAF8B;AAAA;AAAA;AAAA;AAAA;AADU;AAAA,CAAzC;;AAMA,mBAAK,gCAAL,EAAuC,UAAMF,CAAN;AAAA;AAAA,gDAEhC,QAFgC;;AACR,yBAAMD,OAAOD,MAAb;AAAA;AAAA,sBAAb,6BAAa,QAAb,EAAkC,QAAlC,CAAa,sEAAvBG,MAAuB;;AACxBC,YAAN,GAAiB,KAAjB;AACAF,MAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAF8B;AAAA;AAAA;AAAA;AAAA;AADQ;AAAA,CAAvC","file":"subject-empty.test.js","sourcesContent":["import test from 'ava';\nimport parse from '@commitlint/parse';\nimport subjectEmpty from './subject-empty';\n\nconst messages = {\n\tempty: 'test: \\nbody',\n\tfilled: 'test: subject\\nbody'\n};\n\nconst parsed = {\n\tempty: parse(messages.empty),\n\tfilled: parse(messages.filled)\n};\n\ntest('without subject should succeed for empty keyword', async t => {\n\tconst [actual] = subjectEmpty(await parsed.empty);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('without subject should fail for \"never\"', async t => {\n\tconst [actual] = subjectEmpty(await parsed.empty, 'never');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('without subject should succeed for \"always\"', async t => {\n\tconst [actual] = subjectEmpty(await parsed.empty, 'always');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with subject fail for empty keyword', async t => {\n\tconst [actual] = subjectEmpty(await parsed.filled);\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with subject succeed for \"never\"', async t => {\n\tconst [actual] = subjectEmpty(await parsed.filled, 'never');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with subject fail for \"always\"', async t => {\n\tconst [actual] = subjectEmpty(await parsed.filled, 'always');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n"]}