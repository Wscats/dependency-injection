{"version":3,"sources":["../src/type-empty.test.js"],"names":["messages","empty","filled","parsed","t","actual","expected","is"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,WAAW;AAChBC,QAAO,UADS;AAEhBC,SAAQ;AAFQ,CAAjB;;AAKA,IAAMC,SAAS;AACdF,QAAO,qBAAMD,SAASC,KAAf,CADO;AAEdC,SAAQ,qBAAMF,SAASE,MAAf;AAFM,CAAf;;AAKA,mBAAK,+CAAL,EAAsD,UAAME,CAAN;AAAA;AAAA,uCAE/C,QAF+C;;AAC1B,yBAAMD,OAAOF,KAAb;AAAA;AAAA,iBAAV,0BAAU,QAAV,CAAU,6DAApBI,MAAoB;;AACrBC,YAAN,GAAiB,IAAjB;AACAF,MAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAF2B;AAAA;AAAA;AAAA;AAAA;AAD0B;AAAA,CAAtD;;AAMA,mBAAK,sCAAL,EAA6C,UAAMF,CAAN;AAAA;AAAA,wCAEtC,QAFsC;;AACjB,yBAAMD,OAAOF,KAAb;AAAA;AAAA,kBAAV,0BAAU,QAAV,EAA8B,OAA9B,CAAU,8DAApBI,MAAoB;;AACrBC,YAAN,GAAiB,KAAjB;AACAF,MAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAF2B;AAAA;AAAA;AAAA;AAAA;AADiB;AAAA,CAA7C;;AAMA,mBAAK,0CAAL,EAAiD,UAAMF,CAAN;AAAA;AAAA,wCAE1C,QAF0C;;AACrB,yBAAMD,OAAOF,KAAb;AAAA;AAAA,kBAAV,0BAAU,QAAV,EAA8B,QAA9B,CAAU,8DAApBI,MAAoB;;AACrBC,YAAN,GAAiB,IAAjB;AACAF,MAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAF2B;AAAA;AAAA;AAAA;AAAA;AADqB;AAAA,CAAjD;;AAMA,mBAAK,kCAAL,EAAyC,UAAMF,CAAN;AAAA;AAAA,wCAElC,QAFkC;;AACb,yBAAMD,OAAOD,MAAb;AAAA;AAAA,kBAAV,0BAAU,QAAV,CAAU,8DAApBG,MAAoB;;AACrBC,YAAN,GAAiB,KAAjB;AACAF,MAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAF2B;AAAA;AAAA;AAAA;AAAA;AADa;AAAA,CAAzC;;AAMA,mBAAK,+BAAL,EAAsC,UAAMF,CAAN;AAAA;AAAA,yCAE/B,QAF+B;;AACV,yBAAMD,OAAOD,MAAb;AAAA;AAAA,kBAAV,0BAAU,QAAV,EAA+B,OAA/B,CAAU,+DAApBG,MAAoB;;AACrBC,YAAN,GAAiB,IAAjB;AACAF,MAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAF2B;AAAA;AAAA;AAAA;AAAA;AADU;AAAA,CAAtC;;AAMA,mBAAK,6BAAL,EAAoC,UAAMF,CAAN;AAAA;AAAA,0CAE7B,QAF6B;;AACR,yBAAMD,OAAOD,MAAb;AAAA;AAAA,mBAAV,0BAAU,QAAV,EAA+B,QAA/B,CAAU,gEAApBG,MAAoB;;AACrBC,YAAN,GAAiB,KAAjB;AACAF,MAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAF2B;AAAA;AAAA;AAAA;AAAA;AADQ;AAAA,CAApC","file":"type-empty.test.js","sourcesContent":["import test from 'ava';\nimport parse from '@commitlint/parse';\nimport typeEmpty from './type-empty';\n\nconst messages = {\n\tempty: '(scope):',\n\tfilled: 'type: subject'\n};\n\nconst parsed = {\n\tempty: parse(messages.empty),\n\tfilled: parse(messages.filled)\n};\n\ntest('without type should succeed for empty keyword', async t => {\n\tconst [actual] = typeEmpty(await parsed.empty);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('without type should fail for \"never\"', async t => {\n\tconst [actual] = typeEmpty(await parsed.empty, 'never');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('without type should succeed for \"always\"', async t => {\n\tconst [actual] = typeEmpty(await parsed.empty, 'always');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with type fail for empty keyword', async t => {\n\tconst [actual] = typeEmpty(await parsed.filled);\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with type succeed for \"never\"', async t => {\n\tconst [actual] = typeEmpty(await parsed.filled, 'never');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with type fail for \"always\"', async t => {\n\tconst [actual] = typeEmpty(await parsed.filled, 'always');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n"]}