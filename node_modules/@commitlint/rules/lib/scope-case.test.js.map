{"version":3,"sources":["../src/scope-case.test.js"],"names":["messages","empty","lowercase","mixedcase","uppercase","camelcase","kebabcase","pascalcase","snakecase","startcase","parsed","t","actual","expected","is"],"mappings":"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","file":"scope-case.test.js","sourcesContent":["import test from 'ava';\nimport parse from '@commitlint/parse';\nimport scopeCase from './scope-case';\n\nconst messages = {\n\tempty: 'test: subject',\n\tlowercase: 'test(scope): subject',\n\tmixedcase: 'test(sCoPe): subject',\n\tuppercase: 'test(SCOPE): subject',\n\tcamelcase: 'test(myScope): subject',\n\tkebabcase: 'test(my-scope): subject',\n\tpascalcase: 'test(MyScope): subject',\n\tsnakecase: 'test(my_scope): subject',\n\tstartcase: 'test(My Scope): subject'\n};\n\nconst parsed = {\n\tempty: parse(messages.empty),\n\tlowercase: parse(messages.lowercase),\n\tmixedcase: parse(messages.mixedcase),\n\tuppercase: parse(messages.uppercase),\n\tcamelcase: parse(messages.camelcase),\n\tkebabcase: parse(messages.kebabcase),\n\tpascalcase: parse(messages.pascalcase),\n\tsnakecase: parse(messages.snakecase),\n\tstartcase: parse(messages.startcase)\n};\n\ntest('with empty scope should succeed for \"never lowercase\"', async t => {\n\tconst [actual] = scopeCase(await parsed.empty, 'never', 'lowercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with empty scope should succeed for \"always lowercase\"', async t => {\n\tconst [actual] = scopeCase(await parsed.empty, 'always', 'lowercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with empty scope should succeed for \"never uppercase\"', async t => {\n\tconst [actual] = scopeCase(await parsed.empty, 'never', 'uppercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with empty scope should succeed for \"always uppercase\"', async t => {\n\tconst [actual] = scopeCase(await parsed.empty, 'always', 'uppercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with empty scope should succeed for \"never camelcase\"', async t => {\n\tconst [actual] = scopeCase(await parsed.empty, 'never', 'camel-case');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with empty scope should succeed for \"always camelcase\"', async t => {\n\tconst [actual] = scopeCase(await parsed.empty, 'never', 'camel-case');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with empty scope should succeed for \"never kebabcase\"', async t => {\n\tconst [actual] = scopeCase(await parsed.empty, 'never', 'kebab-case');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with empty scope should succeed for \"always kebabcase\"', async t => {\n\tconst [actual] = scopeCase(await parsed.empty, 'never', 'kebab-case');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with empty scope should succeed for \"never pascalcase\"', async t => {\n\tconst [actual] = scopeCase(await parsed.empty, 'never', 'pascal-case');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with empty scope should succeed for \"always pascalcase\"', async t => {\n\tconst [actual] = scopeCase(await parsed.empty, 'never', 'pascal-case');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with empty scope should succeed for \"never snakecase\"', async t => {\n\tconst [actual] = scopeCase(await parsed.empty, 'never', 'snake-case');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with empty scope should succeed for \"always snakecase\"', async t => {\n\tconst [actual] = scopeCase(await parsed.empty, 'never', 'snake-case');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with empty scope should succeed for \"never startcase\"', async t => {\n\tconst [actual] = scopeCase(await parsed.empty, 'never', 'start-case');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with empty scope should succeed for \"always startcase\"', async t => {\n\tconst [actual] = scopeCase(await parsed.empty, 'never', 'start-case');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with lowercase scope should fail for \"never lowercase\"', async t => {\n\tconst [actual] = scopeCase(await parsed.lowercase, 'never', 'lowercase');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with lowercase scope should succeed for \"always lowercase\"', async t => {\n\tconst [actual] = scopeCase(await parsed.lowercase, 'always', 'lowercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with mixedcase scope should succeed for \"never lowercase\"', async t => {\n\tconst [actual] = scopeCase(await parsed.mixedcase, 'never', 'lowercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with mixedcase scope should fail for \"always lowercase\"', async t => {\n\tconst [actual] = scopeCase(await parsed.mixedcase, 'always', 'lowercase');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with mixedcase scope should succeed for \"never uppercase\"', async t => {\n\tconst [actual] = scopeCase(await parsed.mixedcase, 'never', 'uppercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with kebabcase scope should succeed for \"always lowercase\"', async t => {\n\tconst [actual] = scopeCase(await parsed.kebabcase, 'always', 'lowercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with kebabcase scope should fail for \"always camelcase\"', async t => {\n\tconst [actual] = scopeCase(await parsed.kebabcase, 'always', 'camel-case');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with kebabcase scope should fail for \"always pascalcase\"', async t => {\n\tconst [actual] = scopeCase(await parsed.kebabcase, 'always', 'pascal-case');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with kebabcase scope should succeed for \"always kebabcase\"', async t => {\n\tconst [actual] = scopeCase(await parsed.kebabcase, 'always', 'kebab-case');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with snakecase scope should succeed for \"always lowercase\"', async t => {\n\tconst [actual] = scopeCase(await parsed.snakecase, 'always', 'lowercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with snakecase scope should fail for \"always camelcase\"', async t => {\n\tconst [actual] = scopeCase(await parsed.snakecase, 'always', 'camel-case');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with snakecase scope should fail for \"always pascalcase\"', async t => {\n\tconst [actual] = scopeCase(await parsed.snakecase, 'always', 'pascal-case');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with snakecase scope should succeed for \"always snakecase\"', async t => {\n\tconst [actual] = scopeCase(await parsed.snakecase, 'always', 'snake-case');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with camelcase scope should fail for \"always lowercase\"', async t => {\n\tconst [actual] = scopeCase(await parsed.camelcase, 'always', 'lowercase');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with camelcase scope should succeed for \"always camelcase\"', async t => {\n\tconst [actual] = scopeCase(await parsed.camelcase, 'always', 'camel-case');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with camelcase scope should fail for \"always kebabcase\"', async t => {\n\tconst [actual] = scopeCase(await parsed.camelcase, 'always', 'kebab-case');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with camelcase scope should fail for \"always pascalcase\"', async t => {\n\tconst [actual] = scopeCase(await parsed.camelcase, 'always', 'pascal-case');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with pascalcase scope should fail for \"always lowercase\"', async t => {\n\tconst [actual] = scopeCase(await parsed.pascalcase, 'always', 'lowercase');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with pascalcase scope should fail for \"always kebabcase\"', async t => {\n\tconst [actual] = scopeCase(await parsed.pascalcase, 'always', 'kebab-case');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with pascalcase scope should fail for \"always camelcase\"', async t => {\n\tconst [actual] = scopeCase(await parsed.pascalcase, 'always', 'camel-case');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with pascalcase scope should succeed for \"always pascalcase\"', async t => {\n\tconst [actual] = scopeCase(await parsed.pascalcase, 'always', 'pascal-case');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with mixedcase scope should fail for \"always uppercase\"', async t => {\n\tconst [actual] = scopeCase(await parsed.mixedcase, 'always', 'uppercase');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with uppercase scope should fail for \"never uppercase\"', async t => {\n\tconst [actual] = scopeCase(await parsed.uppercase, 'never', 'uppercase');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with uppercase scope should succeed for \"always uppercase\"', async t => {\n\tconst [actual] = scopeCase(await parsed.uppercase, 'always', 'uppercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with uppercase scope should succeed for \"always [uppercase, lowercase]\"', async t => {\n\tconst [actual] = scopeCase(await parsed.uppercase, 'always', [\n\t\t'uppercase',\n\t\t'lowercase'\n\t]);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with lowercase scope should succeed for \"always [uppercase, lowercase]\"', async t => {\n\tconst [actual] = scopeCase(await parsed.lowercase, 'always', [\n\t\t'uppercase',\n\t\t'lowercase'\n\t]);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with mixedcase scope should fail for \"always [uppercase, lowercase]\"', async t => {\n\tconst [actual] = scopeCase(await parsed.mixedcase, 'always', [\n\t\t'uppercase',\n\t\t'lowercase'\n\t]);\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with mixedcase scope should pass for \"always [uppercase, lowercase, camel-case]\"', async t => {\n\tconst [actual] = scopeCase(await parsed.mixedcase, 'always', [\n\t\t'uppercase',\n\t\t'lowercase',\n\t\t'camel-case'\n\t]);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with mixedcase scope should pass for \"never [uppercase, lowercase]\"', async t => {\n\tconst [actual] = scopeCase(await parsed.mixedcase, 'never', [\n\t\t'uppercase',\n\t\t'lowercase'\n\t]);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with uppercase scope should fail for \"never [uppercase, lowercase]\"', async t => {\n\tconst [actual] = scopeCase(await parsed.uppercase, 'never', [\n\t\t'uppercase',\n\t\t'lowercase'\n\t]);\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n"]}