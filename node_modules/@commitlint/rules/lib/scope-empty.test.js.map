{"version":3,"sources":["../src/scope-empty.test.js"],"names":["messages","plain","superfluous","empty","parsed","t","actual","expected","deepEqual"],"mappings":"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","file":"scope-empty.test.js","sourcesContent":["import test from 'ava';\nimport parse from '@commitlint/parse';\nimport scopeEmpty from './scope-empty';\n\nconst messages = {\n\tplain: 'foo(bar): baz',\n\tsuperfluous: 'foo(): baz',\n\tempty: 'foo: baz'\n};\n\nconst parsed = {\n\tplain: parse(messages.plain),\n\tsuperfluous: parse(messages.superfluous),\n\tempty: parse(messages.empty)\n};\n\ntest('with plain message it should succeed for empty keyword', async t => {\n\tconst [actual] = scopeEmpty(await parsed.plain);\n\tconst expected = true;\n\tt.deepEqual(actual, expected);\n});\n\ntest('with plain message it should succeed for \"never\"', async t => {\n\tconst [actual] = scopeEmpty(await parsed.plain, 'never');\n\tconst expected = true;\n\tt.deepEqual(actual, expected);\n});\n\ntest('with plain message it should fail for \"always\"', async t => {\n\tconst [actual] = scopeEmpty(await parsed.plain, 'always');\n\tconst expected = false;\n\tt.deepEqual(actual, expected);\n});\n\ntest('with superfluous message it should fail for empty keyword', async t => {\n\tconst [actual] = scopeEmpty(await parsed.superfluous);\n\tconst expected = false;\n\tt.deepEqual(actual, expected);\n});\n\ntest('with superfluous message it should fail for \"never\"', async t => {\n\tconst [actual] = scopeEmpty(await parsed.superfluous, 'never');\n\tconst expected = false;\n\tt.deepEqual(actual, expected);\n});\n\ntest('with superfluous message it should fail for \"always\"', async t => {\n\tconst [actual] = scopeEmpty(await parsed.superfluous, 'always');\n\tconst expected = true;\n\tt.deepEqual(actual, expected);\n});\n\ntest('with empty message it should fail for empty keyword', async t => {\n\tconst [actual] = scopeEmpty(await parsed.empty);\n\tconst expected = false;\n\tt.deepEqual(actual, expected);\n});\n\ntest('with empty message it should fail for \"never\"', async t => {\n\tconst [actual] = scopeEmpty(await parsed.empty, 'never');\n\tconst expected = false;\n\tt.deepEqual(actual, expected);\n});\n\ntest('with empty message it should fail for \"always\"', async t => {\n\tconst [actual] = scopeEmpty(await parsed.empty, 'always');\n\tconst expected = true;\n\tt.deepEqual(actual, expected);\n});\n"]}