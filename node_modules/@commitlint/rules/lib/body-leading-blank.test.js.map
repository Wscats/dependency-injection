{"version":3,"sources":["../src/body-leading-blank.test.js"],"names":["messages","simple","without","with","parsed","t","actual","expected","is"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,WAAW;AAChBC,SAAQ,eADQ;AAEhBC,UAAS,qBAFO;AAGhBC,OAAM;AAHU,CAAjB;;AAMA,IAAMC,SAAS;AACdH,SAAQ,qBAAMD,SAASC,MAAf,CADM;AAEdC,UAAS,qBAAMF,SAASE,OAAf,CAFK;AAGdC,OAAM,qBAAMH,SAASG,IAAf;AAHQ,CAAf;;AAMA,mBAAK,sDAAL,EAA6D,UAAME,CAAN;AAAA;AAAA,qDAEtD,QAFsD;;AAC1B,yBAAMD,OAAOH,MAAb;AAAA;AAAA,wBAAjB,iCAAiB,QAAjB,CAAiB,2EAA3BK,MAA2B;;AAC5BC,YAAN,GAAiB,IAAjB;AACAF,MAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAFkC;AAAA;AAAA;AAAA;AAAA;AAD0B;AAAA,CAA7D;;AAMA,mBAAK,gDAAL,EAAuD,UAAMF,CAAN;AAAA;AAAA,sDAEhD,QAFgD;;AACpB,yBAAMD,OAAOH,MAAb;AAAA;AAAA,yBAAjB,iCAAiB,QAAjB,EAAsC,OAAtC,CAAiB,4EAA3BK,MAA2B;;AAC5BC,YAAN,GAAiB,IAAjB;AACAF,MAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAFkC;AAAA;AAAA;AAAA;AAAA;AADoB;AAAA,CAAvD;;AAMA,mBAAK,iDAAL,EAAwD,UAAMF,CAAN;AAAA;AAAA,sDAEjD,QAFiD;;AACrB,yBAAMD,OAAOH,MAAb;AAAA;AAAA,yBAAjB,iCAAiB,QAAjB,EAAsC,QAAtC,CAAiB,4EAA3BK,MAA2B;;AAC5BC,YAAN,GAAiB,IAAjB;AACAF,MAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAFkC;AAAA;AAAA;AAAA;AAAA;AADqB;AAAA,CAAxD;;AAMA,mBAAK,8DAAL,EAAqE,UAAMF,CAAN;AAAA;AAAA,sDAE9D,QAF8D;;AAClC,yBAAMD,OAAOF,OAAb;AAAA;AAAA,yBAAjB,iCAAiB,QAAjB,CAAiB,4EAA3BI,MAA2B;;AAC5BC,YAAN,GAAiB,KAAjB;AACAF,MAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAFkC;AAAA;AAAA;AAAA;AAAA;AADkC;AAAA,CAArE;;AAMA,mBAAK,2DAAL,EAAkE,UAAMF,CAAN;AAAA;AAAA,uDAE3D,QAF2D;;AAC/B,yBAAMD,OAAOF,OAAb;AAAA;AAAA,yBAAjB,iCAAiB,QAAjB,EAAuC,OAAvC,CAAiB,6EAA3BI,MAA2B;;AAC5BC,YAAN,GAAiB,IAAjB;AACAF,MAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAFkC;AAAA;AAAA;AAAA;AAAA;AAD+B;AAAA,CAAlE;;AAMA,mBAAK,yDAAL,EAAgE,UAAMF,CAAN;AAAA;AAAA,wDAEzD,QAFyD;;AAC7B,yBAAMD,OAAOF,OAAb;AAAA;AAAA,0BAAjB,iCAAiB,QAAjB,EAAuC,QAAvC,CAAiB,8EAA3BI,MAA2B;;AAC5BC,YAAN,GAAiB,KAAjB;AACAF,MAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAFkC;AAAA;AAAA;AAAA;AAAA;AAD6B;AAAA,CAAhE;;AAMA,mBAAK,8DAAL,EAAqE,UAAMF,CAAN;AAAA;AAAA,wDAE9D,QAF8D;;AAClC,yBAAMD,OAAOD,IAAb;AAAA;AAAA,0BAAjB,iCAAiB,QAAjB,CAAiB,8EAA3BG,MAA2B;;AAC5BC,YAAN,GAAiB,IAAjB;AACAF,MAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAFkC;AAAA;AAAA;AAAA;AAAA;AADkC;AAAA,CAArE;;AAMA,mBAAK,qDAAL,EAA4D,UAAMF,CAAN;AAAA;AAAA,wDAErD,QAFqD;;AACzB,yBAAMD,OAAOD,IAAb;AAAA;AAAA,0BAAjB,iCAAiB,QAAjB,EAAoC,OAApC,CAAiB,8EAA3BG,MAA2B;;AAC5BC,YAAN,GAAiB,KAAjB;AACAF,MAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAFkC;AAAA;AAAA;AAAA;AAAA;AADyB;AAAA,CAA5D;;AAMA,mBAAK,yDAAL,EAAgE,UAAMF,CAAN;AAAA;AAAA,wDAEzD,QAFyD;;AAC7B,yBAAMD,OAAOD,IAAb;AAAA;AAAA,0BAAjB,iCAAiB,QAAjB,EAAoC,QAApC,CAAiB,8EAA3BG,MAA2B;;AAC5BC,YAAN,GAAiB,IAAjB;AACAF,MAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAFkC;AAAA;AAAA;AAAA;AAAA;AAD6B;AAAA,CAAhE","file":"body-leading-blank.test.js","sourcesContent":["import test from 'ava';\nimport parse from '@commitlint/parse';\nimport bodyLeadingBlank from './body-leading-blank';\n\nconst messages = {\n\tsimple: 'test: subject',\n\twithout: 'test: subject\\nbody',\n\twith: 'test: subject\\n\\nbody'\n};\n\nconst parsed = {\n\tsimple: parse(messages.simple),\n\twithout: parse(messages.without),\n\twith: parse(messages.with)\n};\n\ntest('with simple message should succeed for empty keyword', async t => {\n\tconst [actual] = bodyLeadingBlank(await parsed.simple);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with simple message should succeed for \"never\"', async t => {\n\tconst [actual] = bodyLeadingBlank(await parsed.simple, 'never');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with simple message should succeed for \"always\"', async t => {\n\tconst [actual] = bodyLeadingBlank(await parsed.simple, 'always');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('without blank line before body should fail for empty keyword', async t => {\n\tconst [actual] = bodyLeadingBlank(await parsed.without);\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('without blank line before body should succeed for \"never\"', async t => {\n\tconst [actual] = bodyLeadingBlank(await parsed.without, 'never');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('without blank line before body should fail for \"always\"', async t => {\n\tconst [actual] = bodyLeadingBlank(await parsed.without, 'always');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with blank line before body should succeed for empty keyword', async t => {\n\tconst [actual] = bodyLeadingBlank(await parsed.with);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with blank line before body should fail for \"never\"', async t => {\n\tconst [actual] = bodyLeadingBlank(await parsed.with, 'never');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with blank line before body should succeed for \"always\"', async t => {\n\tconst [actual] = bodyLeadingBlank(await parsed.with, 'always');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n"]}