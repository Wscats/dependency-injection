{"version":3,"sources":["../src/type-enum.test.js"],"names":["messages","empty","a","b","parsed","t","actual","expected","is"],"mappings":"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","file":"type-enum.test.js","sourcesContent":["import test from 'ava';\nimport parse from '@commitlint/parse';\nimport check from './type-enum';\n\nconst messages = {\n\tempty: '(): \\n',\n\ta: 'a(): \\n',\n\tb: 'b(): \\n'\n};\n\nconst parsed = {\n\tempty: parse(messages.empty),\n\ta: parse(messages.a),\n\tb: parse(messages.b)\n};\n\ntest('empty succeeds', async t => {\n\tconst [actual] = check(await parsed.empty);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('empty on \"a\" succeeds', async t => {\n\tconst [actual] = check(await parsed.empty, '', ['a']);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('empty on \"always a\" succeeds', async t => {\n\tconst [actual] = check(await parsed.empty, 'always', ['a']);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('empty on \"never a\" succeeds', async t => {\n\tconst [actual] = check(await parsed.empty, 'never', ['a']);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('empty on \"always a, b\" succeeds', async t => {\n\tconst [actual] = check(await parsed.empty, 'always', ['a', 'b']);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('empty on \"never a, b\" succeeds', async t => {\n\tconst [actual] = check(await parsed.empty, 'neber', ['a', 'b']);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('a on \"a\" succeeds', async t => {\n\tconst [actual] = check(await parsed.a, '', ['a']);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('a on \"always a\" succeeds', async t => {\n\tconst [actual] = check(await parsed.a, 'always', ['a']);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('a on \"never a\" fails', async t => {\n\tconst [actual] = check(await parsed.a, 'never', ['a']);\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('b on \"b\" succeeds', async t => {\n\tconst [actual] = check(await parsed.b, '', ['b']);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('b on \"always b\" succeeds', async t => {\n\tconst [actual] = check(await parsed.b, 'always', ['b']);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('b on \"never b\" fails', async t => {\n\tconst [actual] = check(await parsed.b, 'never', ['b']);\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('a on \"a, b\" succeeds', async t => {\n\tconst [actual] = check(await parsed.a, '', ['a', 'b']);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('a on \"always a, b\" succeeds', async t => {\n\tconst [actual] = check(await parsed.a, 'always', ['a', 'b']);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('a on \"never a, b\" fails', async t => {\n\tconst [actual] = check(await parsed.a, 'never', ['a', 'b']);\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('b on \"a, b\" succeeds', async t => {\n\tconst [actual] = check(await parsed.b, '', ['a', 'b']);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('b on \"always a, b\" succeeds', async t => {\n\tconst [actual] = check(await parsed.b, 'always', ['a', 'b']);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('b on \"never a, b\" fails', async t => {\n\tconst [actual] = check(await parsed.b, 'never', ['a', 'b']);\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n"]}