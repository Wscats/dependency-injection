{"version":3,"sources":["../src/subject-case.test.js"],"names":["messages","empty","lowercase","mixedcase","uppercase","camelcase","kebabcase","pascalcase","snakecase","startcase","parsed","t","actual","expected","is","message","true","indexOf"],"mappings":"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","file":"subject-case.test.js","sourcesContent":["import test from 'ava';\nimport parse from '@commitlint/parse';\nimport subjectCase from './subject-case';\n\nconst messages = {\n\tempty: 'test:\\n',\n\tlowercase: 'test: subject',\n\tmixedcase: 'test: sUbJeCt',\n\tuppercase: 'test: SUBJECT',\n\tcamelcase: 'test: subJect',\n\tkebabcase: 'test: sub-ject',\n\tpascalcase: 'test: SubJect',\n\tsnakecase: 'test: sub_ject',\n\tstartcase: 'test: Sub Ject'\n};\n\nconst parsed = {\n\tempty: parse(messages.empty),\n\tlowercase: parse(messages.lowercase),\n\tmixedcase: parse(messages.mixedcase),\n\tuppercase: parse(messages.uppercase),\n\tcamelcase: parse(messages.camelcase),\n\tkebabcase: parse(messages.kebabcase),\n\tpascalcase: parse(messages.pascalcase),\n\tsnakecase: parse(messages.snakecase),\n\tstartcase: parse(messages.startcase)\n};\n\ntest('with empty subject should succeed for \"never lowercase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.empty, 'never', 'lowercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with empty subject should succeed for \"always lowercase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.empty, 'always', 'lowercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with empty subject should succeed for \"never uppercase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.empty, 'never', 'uppercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with empty subject should succeed for \"always uppercase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.empty, 'always', 'uppercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with lowercase subject should fail for \"never lowercase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.lowercase, 'never', 'lowercase');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with lowercase subject should succeed for \"always lowercase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.lowercase, 'always', 'lowercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with mixedcase subject should succeed for \"never lowercase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.mixedcase, 'never', 'lowercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with mixedcase subject should fail for \"always lowercase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.mixedcase, 'always', 'lowercase');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with mixedcase subject should succeed for \"never uppercase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.mixedcase, 'never', 'uppercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with mixedcase subject should fail for \"always uppercase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.mixedcase, 'always', 'uppercase');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with uppercase subject should fail for \"never uppercase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.uppercase, 'never', 'uppercase');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with lowercase subject should succeed for \"always uppercase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.uppercase, 'always', 'uppercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with camelcase subject should fail for \"always uppercase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.camelcase, 'always', 'uppercase');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with camelcase subject should succeed for \"never uppercase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.camelcase, 'never', 'uppercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with camelcase subject should fail for \"always pascalcase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.camelcase, 'always', 'pascal-case');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with camelcase subject should fail for \"always kebabcase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.camelcase, 'always', 'kebab-case');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with camelcase subject should fail for \"always snakecase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.camelcase, 'always', 'snake-case');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with camelcase subject should succeed for \"always camelcase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.camelcase, 'always', 'camel-case');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with pascalcase subject should fail for \"always uppercase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.pascalcase, 'always', 'uppercase');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with pascalcase subject should succeed for \"never uppercase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.pascalcase, 'never', 'uppercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with pascalcase subject should succeed for \"always pascalcase\"', async t => {\n\tconst [actual] = subjectCase(\n\t\tawait parsed.pascalcase,\n\t\t'always',\n\t\t'pascal-case'\n\t);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with pascalcase subject should fail for \"always kebabcase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.pascalcase, 'always', 'kebab-case');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with pascalcase subject should fail for \"always snakecase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.pascalcase, 'always', 'snake-case');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with pascalcase subject should fail for \"always camelcase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.pascalcase, 'always', 'camel-case');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with snakecase subject should fail for \"always uppercase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.snakecase, 'always', 'uppercase');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with snakecase subject should succeed for \"never uppercase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.snakecase, 'never', 'uppercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with snakecase subject should fail for \"always pascalcase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.snakecase, 'always', 'pascal-case');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with snakecase subject should fail for \"always kebabcase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.snakecase, 'always', 'kebab-case');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with snakecase subject should succeed for \"always snakecase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.snakecase, 'always', 'snake-case');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with snakecase subject should fail for \"always camelcase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.snakecase, 'always', 'camel-case');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with startcase subject should fail for \"always uppercase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.startcase, 'always', 'uppercase');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with startcase subject should succeed for \"never uppercase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.startcase, 'never', 'uppercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with startcase subject should fail for \"always pascalcase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.startcase, 'always', 'pascal-case');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with startcase subject should fail for \"always kebabcase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.startcase, 'always', 'kebab-case');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with startcase subject should fail for \"always snakecase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.startcase, 'always', 'snake-case');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with startcase subject should fail for \"always camelcase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.startcase, 'always', 'camel-case');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with startcase subject should succeed for \"always startcase\"', async t => {\n\tconst [actual] = subjectCase(await parsed.startcase, 'always', 'start-case');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('should use expected message with \"always\"', async t => {\n\tconst [, message] = subjectCase(\n\t\tawait parsed.uppercase,\n\t\t'always',\n\t\t'lower-case'\n\t);\n\tt.true(message.indexOf('must be lower-case') > -1);\n});\n\ntest('should use expected message with \"never\"', async t => {\n\tconst [, message] = subjectCase(\n\t\tawait parsed.uppercase,\n\t\t'never',\n\t\t'upper-case'\n\t);\n\tt.true(message.indexOf('must not be upper-case') > -1);\n});\n\ntest('with uppercase scope should succeed for \"always [uppercase, lowercase]\"', async t => {\n\tconst [actual] = subjectCase(await parsed.uppercase, 'always', [\n\t\t'uppercase',\n\t\t'lowercase'\n\t]);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with lowercase subject should succeed for \"always [uppercase, lowercase]\"', async t => {\n\tconst [actual] = subjectCase(await parsed.lowercase, 'always', [\n\t\t'uppercase',\n\t\t'lowercase'\n\t]);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with mixedcase subject should fail for \"always [uppercase, lowercase]\"', async t => {\n\tconst [actual] = subjectCase(await parsed.mixedcase, 'always', [\n\t\t'uppercase',\n\t\t'lowercase'\n\t]);\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with mixedcase subject should pass for \"always [uppercase, lowercase, camel-case]\"', async t => {\n\tconst [actual] = subjectCase(await parsed.mixedcase, 'always', [\n\t\t'uppercase',\n\t\t'lowercase',\n\t\t'camel-case'\n\t]);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with mixedcase scope should pass for \"never [uppercase, lowercase]\"', async t => {\n\tconst [actual] = subjectCase(await parsed.mixedcase, 'never', [\n\t\t'uppercase',\n\t\t'lowercase'\n\t]);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with uppercase scope should fail for \"never [uppercase, lowercase]\"', async t => {\n\tconst [actual] = subjectCase(await parsed.uppercase, 'never', [\n\t\t'uppercase',\n\t\t'lowercase'\n\t]);\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n"]}