{"version":3,"sources":["../src/footer-max-length.test.js"],"names":["short","long","value","length","messages","simple","empty","parsed","t","actual","expected","is"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,QAAQ,oBAAd;AACA,IAAMC,OAAO,qBAAb;;AAEA,IAAMC,QAAQF,MAAMG,MAApB;;AAEA,IAAMC,WAAW;AAChBC,SAAQ,eADQ;AAEhBC,QAAO,qBAFS;AAGhBN,QAAQ,kBAAiBA,KAAM,EAHf;AAIhBC,OAAO,kBAAiBA,IAAK;AAJb,CAAjB;;AAOA,IAAMM,SAAS;AACdF,SAAQ,qBAAMD,SAASC,MAAf,CADM;AAEdC,QAAO,qBAAMF,SAASE,KAAf,CAFO;AAGdN,QAAO,qBAAMI,SAASJ,KAAf,CAHO;AAIdC,OAAM,qBAAMG,SAASH,IAAf;AAJQ,CAAf;;AAOA,mBAAK,4BAAL,EAAmC,UAAMO,CAAN;AAAA;AAAA,+BAE5B,QAF4B;;AACX,yBAAMD,OAAOF,MAAb;AAAA;AAAA,aAAN,+BAAM,QAAN,EAA2B,EAA3B,EAA+BH,KAA/B,CAAM,qDAAhBO,MAAgB;;AACjBC,YAAN,GAAiB,IAAjB;AACAF,MAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAFuB;AAAA;AAAA;AAAA;AAAA;AADW;AAAA,CAAnC;;AAMA,mBAAK,2BAAL,EAAkC,UAAMF,CAAN;AAAA;AAAA,gCAE3B,QAF2B;;AACV,yBAAMD,OAAOD,KAAb;AAAA;AAAA,cAAN,+BAAM,QAAN,EAA0B,EAA1B,EAA8BJ,KAA9B,CAAM,sDAAhBO,MAAgB;;AACjBC,YAAN,GAAiB,IAAjB;AACAF,MAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAFuB;AAAA;AAAA;AAAA;AAAA;AADU;AAAA,CAAlC;;AAMA,mBAAK,2BAAL,EAAkC,UAAMF,CAAN;AAAA;AAAA,gCAE3B,QAF2B;;AACV,yBAAMD,OAAOP,KAAb;AAAA;AAAA,cAAN,+BAAM,QAAN,EAA0B,EAA1B,EAA8BE,KAA9B,CAAM,sDAAhBO,MAAgB;;AACjBC,YAAN,GAAiB,IAAjB;AACAF,MAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAFuB;AAAA;AAAA;AAAA;AAAA;AADU;AAAA,CAAlC;;AAMA,mBAAK,uBAAL,EAA8B,UAAMF,CAAN;AAAA;AAAA,gCAEvB,QAFuB;;AACN,yBAAMD,OAAON,IAAb;AAAA;AAAA,cAAN,+BAAM,QAAN,EAAyB,EAAzB,EAA6BC,KAA7B,CAAM,sDAAhBO,MAAgB;;AACjBC,YAAN,GAAiB,KAAjB;AACAF,MAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAFuB;AAAA;AAAA;AAAA;AAAA;AADM;AAAA,CAA9B","file":"footer-max-length.test.js","sourcesContent":["import test from 'ava';\nimport parse from '@commitlint/parse';\nimport check from './footer-max-length';\n\nconst short = 'BREAKING CHANGE: a';\nconst long = 'BREAKING CHANGE: ab';\n\nconst value = short.length;\n\nconst messages = {\n\tsimple: 'test: subject',\n\tempty: 'test: subject\\nbody',\n\tshort: `test: subject\\n${short}`,\n\tlong: `test: subject\\n${long}`\n};\n\nconst parsed = {\n\tsimple: parse(messages.simple),\n\tempty: parse(messages.empty),\n\tshort: parse(messages.short),\n\tlong: parse(messages.long)\n};\n\ntest('with simple should succeed', async t => {\n\tconst [actual] = check(await parsed.simple, '', value);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with empty should succeed', async t => {\n\tconst [actual] = check(await parsed.empty, '', value);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with short should succeed', async t => {\n\tconst [actual] = check(await parsed.short, '', value);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with long should fail', async t => {\n\tconst [actual] = check(await parsed.long, '', value);\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n"]}