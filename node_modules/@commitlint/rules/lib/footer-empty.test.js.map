{"version":3,"sources":["../src/footer-empty.test.js"],"names":["messages","simple","empty","filled","parsed","t","actual","expected","is"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,WAAW;AAChBC,SAAQ,eADQ;AAEhBC,QAAO,qBAFS;AAGhBC,SAAQ;AAHQ,CAAjB;;AAMA,IAAMC,SAAS;AACdH,SAAQ,qBAAMD,SAASC,MAAf,CADM;AAEdC,QAAO,qBAAMF,SAASE,KAAf,CAFO;AAGdC,SAAQ,qBAAMH,SAASG,MAAf;AAHM,CAAf;;AAMA,mBAAK,sDAAL,EAA6D,UAAME,CAAN;AAAA;AAAA,2CAEtD,QAFsD;;AAC/B,yBAAMD,OAAOH,MAAb;AAAA;AAAA,mBAAZ,4BAAY,QAAZ,CAAY,iEAAtBK,MAAsB;;AACvBC,YAAN,GAAiB,IAAjB;AACAF,MAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAF6B;AAAA;AAAA;AAAA;AAAA;AAD+B;AAAA,CAA7D;;AAMA,mBAAK,6CAAL,EAAoD,UAAMF,CAAN;AAAA;AAAA,4CAE7C,QAF6C;;AACtB,yBAAMD,OAAOH,MAAb;AAAA;AAAA,oBAAZ,4BAAY,QAAZ,EAAiC,OAAjC,CAAY,kEAAtBK,MAAsB;;AACvBC,YAAN,GAAiB,KAAjB;AACAF,MAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAF6B;AAAA;AAAA;AAAA;AAAA;AADsB;AAAA,CAApD;;AAMA,mBAAK,iDAAL,EAAwD,UAAMF,CAAN;AAAA;AAAA,4CAEjD,QAFiD;;AAC1B,yBAAMD,OAAOH,MAAb;AAAA;AAAA,oBAAZ,4BAAY,QAAZ,EAAiC,QAAjC,CAAY,kEAAtBK,MAAsB;;AACvBC,YAAN,GAAiB,IAAjB;AACAF,MAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAF6B;AAAA;AAAA;AAAA;AAAA;AAD0B;AAAA,CAAxD;;AAMA,mBAAK,oDAAL,EAA2D,UAAMF,CAAN;AAAA;AAAA,4CAEpD,QAFoD;;AAC7B,yBAAMD,OAAOF,KAAb;AAAA;AAAA,oBAAZ,4BAAY,QAAZ,CAAY,kEAAtBI,MAAsB;;AACvBC,YAAN,GAAiB,IAAjB;AACAF,MAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAF6B;AAAA;AAAA;AAAA;AAAA;AAD6B;AAAA,CAA3D;;AAMA,mBAAK,2CAAL,EAAkD,UAAMF,CAAN;AAAA;AAAA,6CAE3C,QAF2C;;AACpB,yBAAMD,OAAOF,KAAb;AAAA;AAAA,oBAAZ,4BAAY,QAAZ,EAAgC,OAAhC,CAAY,mEAAtBI,MAAsB;;AACvBC,YAAN,GAAiB,KAAjB;AACAF,MAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAF6B;AAAA;AAAA;AAAA;AAAA;AADoB;AAAA,CAAlD;;AAMA,mBAAK,+CAAL,EAAsD,UAAMF,CAAN;AAAA;AAAA,8CAE/C,QAF+C;;AACxB,yBAAMD,OAAOF,KAAb;AAAA;AAAA,qBAAZ,4BAAY,QAAZ,EAAgC,QAAhC,CAAY,oEAAtBI,MAAsB;;AACvBC,YAAN,GAAiB,IAAjB;AACAF,MAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAF6B;AAAA;AAAA;AAAA;AAAA;AADwB;AAAA,CAAtD;;AAMA,mBAAK,2CAAL,EAAkD,UAAMF,CAAN;AAAA;AAAA,8CAE3C,QAF2C;;AACpB,yBAAMD,OAAOD,MAAb;AAAA;AAAA,qBAAZ,4BAAY,QAAZ,CAAY,oEAAtBG,MAAsB;;AACvBC,YAAN,GAAiB,KAAjB;AACAF,MAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAF6B;AAAA;AAAA;AAAA;AAAA;AADoB;AAAA,CAAlD;;AAMA,mBAAK,wCAAL,EAA+C,UAAMF,CAAN;AAAA;AAAA,8CAExC,QAFwC;;AACjB,yBAAMD,OAAOD,MAAb;AAAA;AAAA,qBAAZ,4BAAY,QAAZ,EAAiC,OAAjC,CAAY,oEAAtBG,MAAsB;;AACvBC,YAAN,GAAiB,IAAjB;AACAF,MAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAF6B;AAAA;AAAA;AAAA;AAAA;AADiB;AAAA,CAA/C;;AAMA,mBAAK,sCAAL,EAA6C,UAAMF,CAAN;AAAA;AAAA,8CAEtC,QAFsC;;AACf,yBAAMD,OAAOD,MAAb;AAAA;AAAA,qBAAZ,4BAAY,QAAZ,EAAiC,QAAjC,CAAY,oEAAtBG,MAAsB;;AACvBC,YAAN,GAAiB,KAAjB;AACAF,MAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAF6B;AAAA;AAAA;AAAA;AAAA;AADe;AAAA,CAA7C","file":"footer-empty.test.js","sourcesContent":["import test from 'ava';\nimport parse from '@commitlint/parse';\nimport footerEmpty from './footer-empty';\n\nconst messages = {\n\tsimple: 'test: subject',\n\tempty: 'test: subject\\nbody',\n\tfilled: 'test: subject\\nBREAKING CHANGE: something important'\n};\n\nconst parsed = {\n\tsimple: parse(messages.simple),\n\tempty: parse(messages.empty),\n\tfilled: parse(messages.filled)\n};\n\ntest('with simple message should succeed for empty keyword', async t => {\n\tconst [actual] = footerEmpty(await parsed.simple);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with simple message should fail for \"never\"', async t => {\n\tconst [actual] = footerEmpty(await parsed.simple, 'never');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with simple message should succeed for \"always\"', async t => {\n\tconst [actual] = footerEmpty(await parsed.simple, 'always');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with empty footer should succeed for empty keyword', async t => {\n\tconst [actual] = footerEmpty(await parsed.empty);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with empty footer should fail for \"never\"', async t => {\n\tconst [actual] = footerEmpty(await parsed.empty, 'never');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with empty footer should succeed for \"always\"', async t => {\n\tconst [actual] = footerEmpty(await parsed.empty, 'always');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with footer should fail for empty keyword', async t => {\n\tconst [actual] = footerEmpty(await parsed.filled);\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with footer should succeed for \"never\"', async t => {\n\tconst [actual] = footerEmpty(await parsed.filled, 'never');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with footer should fail for \"always\"', async t => {\n\tconst [actual] = footerEmpty(await parsed.filled, 'always');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n"]}