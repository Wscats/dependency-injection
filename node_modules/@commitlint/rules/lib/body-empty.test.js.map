{"version":3,"sources":["../src/body-empty.test.js"],"names":["messages","empty","filled","parsed","t","actual","expected","is"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,WAAW;AAChBC,QAAO,eADS;AAEhBC,SAAQ;AAFQ,CAAjB;;AAKA,IAAMC,SAAS;AACdF,QAAO,qBAAMD,SAASC,KAAf,CADO;AAEdC,SAAQ,qBAAMF,SAASE,MAAf;AAFM,CAAf;;AAKA,mBAAK,kDAAL,EAAyD,UAAME,CAAN;AAAA;AAAA,uCAElD,QAFkD;;AAC7B,yBAAMD,OAAOF,KAAb;AAAA;AAAA,iBAAV,0BAAU,QAAV,CAAU,6DAApBI,MAAoB;;AACrBC,YAAN,GAAiB,IAAjB;AACAF,MAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAF2B;AAAA;AAAA;AAAA;AAAA;AAD6B;AAAA,CAAzD;;AAMA,mBAAK,yCAAL,EAAgD,UAAMF,CAAN;AAAA;AAAA,wCAEzC,QAFyC;;AACpB,yBAAMD,OAAOF,KAAb;AAAA;AAAA,kBAAV,0BAAU,QAAV,EAA8B,OAA9B,CAAU,8DAApBI,MAAoB;;AACrBC,YAAN,GAAiB,KAAjB;AACAF,MAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAF2B;AAAA;AAAA;AAAA;AAAA;AADoB;AAAA,CAAhD;;AAMA,mBAAK,6CAAL,EAAoD,UAAMF,CAAN;AAAA;AAAA,wCAE7C,QAF6C;;AACxB,yBAAMD,OAAOF,KAAb;AAAA;AAAA,kBAAV,0BAAU,QAAV,EAA8B,QAA9B,CAAU,8DAApBI,MAAoB;;AACrBC,YAAN,GAAiB,IAAjB;AACAF,MAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAF2B;AAAA;AAAA;AAAA;AAAA;AADwB;AAAA,CAApD;;AAMA,mBAAK,yCAAL,EAAgD,UAAMF,CAAN;AAAA;AAAA,wCAEzC,QAFyC;;AACpB,yBAAMD,OAAOD,MAAb;AAAA;AAAA,kBAAV,0BAAU,QAAV,CAAU,8DAApBG,MAAoB;;AACrBC,YAAN,GAAiB,KAAjB;AACAF,MAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAF2B;AAAA;AAAA;AAAA;AAAA;AADoB;AAAA,CAAhD;;AAMA,mBAAK,sCAAL,EAA6C,UAAMF,CAAN;AAAA;AAAA,yCAEtC,QAFsC;;AACjB,yBAAMD,OAAOD,MAAb;AAAA;AAAA,kBAAV,0BAAU,QAAV,EAA+B,OAA/B,CAAU,+DAApBG,MAAoB;;AACrBC,YAAN,GAAiB,IAAjB;AACAF,MAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAF2B;AAAA;AAAA;AAAA;AAAA;AADiB;AAAA,CAA7C;;AAMA,mBAAK,oCAAL,EAA2C,UAAMF,CAAN;AAAA;AAAA,0CAEpC,QAFoC;;AACf,yBAAMD,OAAOD,MAAb;AAAA;AAAA,mBAAV,0BAAU,QAAV,EAA+B,QAA/B,CAAU,gEAApBG,MAAoB;;AACrBC,YAAN,GAAiB,KAAjB;AACAF,MAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAF2B;AAAA;AAAA;AAAA;AAAA;AADe;AAAA,CAA3C","file":"body-empty.test.js","sourcesContent":["import test from 'ava';\nimport parse from '@commitlint/parse';\nimport bodyEmpty from './body-empty';\n\nconst messages = {\n\tempty: 'test: subject',\n\tfilled: 'test: subject\\nbody'\n};\n\nconst parsed = {\n\tempty: parse(messages.empty),\n\tfilled: parse(messages.filled)\n};\n\ntest('with empty body should succeed for empty keyword', async t => {\n\tconst [actual] = bodyEmpty(await parsed.empty);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with empty body should fail for \"never\"', async t => {\n\tconst [actual] = bodyEmpty(await parsed.empty, 'never');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with empty body should succeed for \"always\"', async t => {\n\tconst [actual] = bodyEmpty(await parsed.empty, 'always');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with body should fail for empty keyword', async t => {\n\tconst [actual] = bodyEmpty(await parsed.filled);\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with body should succeed for \"never\"', async t => {\n\tconst [actual] = bodyEmpty(await parsed.filled, 'never');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with body should fail for \"always\"', async t => {\n\tconst [actual] = bodyEmpty(await parsed.filled, 'always');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n"]}