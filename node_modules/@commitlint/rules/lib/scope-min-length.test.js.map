{"version":3,"sources":["../src/scope-min-length.test.js"],"names":["short","long","value","length","messages","empty","parsed","t","actual","expected","is"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,QAAQ,GAAd;AACA,IAAMC,OAAO,IAAb;;AAEA,IAAMC,QAAQD,KAAKE,MAAnB;;AAEA,IAAMC,WAAW;AAChBC,QAAO,SADS;AAEhBL,QAAQ,QAAOA,KAAM,OAFL;AAGhBC,OAAO,QAAOA,IAAK;AAHH,CAAjB;;AAMA,IAAMK,SAAS;AACdD,QAAO,qBAAMD,SAASC,KAAf,CADO;AAEdL,QAAO,qBAAMI,SAASJ,KAAf,CAFO;AAGdC,OAAM,qBAAMG,SAASH,IAAf;AAHQ,CAAf;;AAMA,mBAAK,2BAAL,EAAkC,UAAMM,CAAN;AAAA;AAAA,+BAE3B,QAF2B;;AACV,yBAAMD,OAAOD,KAAb;AAAA;AAAA,aAAN,8BAAM,QAAN,EAA0B,EAA1B,EAA8BH,KAA9B,CAAM,qDAAhBM,MAAgB;;AACjBC,YAAN,GAAiB,IAAjB;AACAF,MAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAFuB;AAAA;AAAA;AAAA;AAAA;AADU;AAAA,CAAlC;;AAMA,mBAAK,wBAAL,EAA+B,UAAMF,CAAN;AAAA;AAAA,gCAExB,QAFwB;;AACP,yBAAMD,OAAON,KAAb;AAAA;AAAA,cAAN,8BAAM,QAAN,EAA0B,EAA1B,EAA8BE,KAA9B,CAAM,sDAAhBM,MAAgB;;AACjBC,YAAN,GAAiB,KAAjB;AACAF,MAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAFuB;AAAA;AAAA;AAAA;AAAA;AADO;AAAA,CAA/B;;AAMA,mBAAK,0BAAL,EAAiC,UAAMF,CAAN;AAAA;AAAA,gCAE1B,QAF0B;;AACT,yBAAMD,OAAOL,IAAb;AAAA;AAAA,cAAN,8BAAM,QAAN,EAAyB,EAAzB,EAA6BC,KAA7B,CAAM,sDAAhBM,MAAgB;;AACjBC,YAAN,GAAiB,IAAjB;AACAF,MAAEG,EAAF,CAAKF,MAAL,EAAaC,QAAb;AAFuB;AAAA;AAAA;AAAA;AAAA;AADS;AAAA,CAAjC","file":"scope-min-length.test.js","sourcesContent":["import test from 'ava';\nimport parse from '@commitlint/parse';\nimport check from './scope-min-length';\n\nconst short = 'a';\nconst long = 'ab';\n\nconst value = long.length;\n\nconst messages = {\n\tempty: 'test:\\n',\n\tshort: `test(${short}): \\n`,\n\tlong: `test(${long}): \\n`\n};\n\nconst parsed = {\n\tempty: parse(messages.empty),\n\tshort: parse(messages.short),\n\tlong: parse(messages.long)\n};\n\ntest('with empty should succeed', async t => {\n\tconst [actual] = check(await parsed.empty, '', value);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with short should fail', async t => {\n\tconst [actual] = check(await parsed.short, '', value);\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with long should succeed', async t => {\n\tconst [actual] = check(await parsed.long, '', value);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n"]}