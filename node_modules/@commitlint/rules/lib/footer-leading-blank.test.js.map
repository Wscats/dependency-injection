{"version":3,"sources":["../src/footer-leading-blank.test.js"],"names":["messages","simple","body","trailing","without","withoutBody","with","withMulitLine","parsed","t","actual","expected","is"],"mappings":"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","file":"footer-leading-blank.test.js","sourcesContent":["import test from 'ava';\nimport parse from '@commitlint/parse';\nimport footerLeadingBlank from './footer-leading-blank';\n\nconst messages = {\n\tsimple: 'test: subject',\n\tbody: 'test: subject\\nbody',\n\ttrailing: 'test: subject\\nbody\\n\\n',\n\twithout: 'test: subject\\nbody\\nBREAKING CHANGE: something important',\n\twithoutBody:\n\t\t'feat(new-parser): introduces a new parsing library\\n\\nBREAKING CHANGE: new library does not support foo-construct',\n\twith: 'test: subject\\nbody\\n\\nBREAKING CHANGE: something important',\n\twithMulitLine:\n\t\t'test: subject\\nmulti\\nline\\nbody\\n\\nBREAKING CHANGE: something important'\n};\n\nconst parsed = {\n\tsimple: parse(messages.simple),\n\tbody: parse(messages.body),\n\ttrailing: parse(messages.trailing),\n\twithout: parse(messages.without),\n\twithoutBody: parse(messages.withoutBody),\n\twith: parse(messages.with),\n\twithMulitLine: parse(messages.withMulitLine)\n};\n\ntest('with simple message should succeed for empty keyword', async t => {\n\tconst [actual] = footerLeadingBlank(await parsed.simple);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with simple message should succeed for \"never\"', async t => {\n\tconst [actual] = footerLeadingBlank(await parsed.simple, 'never');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with simple message should succeed for \"always\"', async t => {\n\tconst [actual] = footerLeadingBlank(await parsed.simple, 'always');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with body message should succeed for empty keyword', async t => {\n\tconst [actual] = footerLeadingBlank(await parsed.body);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with body message should succeed for \"never\"', async t => {\n\tconst [actual] = footerLeadingBlank(await parsed.body, 'never');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with body message should succeed for \"always\"', async t => {\n\tconst [actual] = footerLeadingBlank(await parsed.body, 'always');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with trailing message should succeed for empty keyword', async t => {\n\tconst [actual] = footerLeadingBlank(await parsed.trailing);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with trailing message should succeed for \"never\"', async t => {\n\tconst [actual] = footerLeadingBlank(await parsed.trailing, 'never');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with trailing message should succeed for \"always\"', async t => {\n\tconst [actual] = footerLeadingBlank(await parsed.trailing, 'always');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('without body should fail for \"never\"', async t => {\n\tconst [actual] = footerLeadingBlank(await parsed.withoutBody, 'never');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('without body should succeed for \"always\"', async t => {\n\tconst [actual] = footerLeadingBlank(await parsed.withoutBody, 'always');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('without blank line before footer should fail for empty keyword', async t => {\n\tconst [actual] = footerLeadingBlank(await parsed.without);\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('without blank line before footer should succeed for \"never\"', async t => {\n\tconst [actual] = footerLeadingBlank(await parsed.without, 'never');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('without blank line before footer should fail for \"always\"', async t => {\n\tconst [actual] = footerLeadingBlank(await parsed.without, 'always');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with blank line before footer should succeed for empty keyword', async t => {\n\tconst [actual] = footerLeadingBlank(await parsed.with);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with blank line before footer should fail for \"never\"', async t => {\n\tconst [actual] = footerLeadingBlank(await parsed.with, 'never');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with blank line before footer should succeed for \"always\"', async t => {\n\tconst [actual] = footerLeadingBlank(await parsed.with, 'always');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with blank line before footer and multiline body should succeed for empty keyword', async t => {\n\tconst [actual] = footerLeadingBlank(await parsed.withMulitLine);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with blank line before footer and multiline body should fail for \"never\"', async t => {\n\tconst [actual] = footerLeadingBlank(await parsed.withMulitLine, 'never');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with blank line before footer and multiline body should succeed for \"always\"', async t => {\n\tconst [actual] = footerLeadingBlank(await parsed.withMulitLine, 'always');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n"]}