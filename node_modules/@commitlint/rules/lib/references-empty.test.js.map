{"version":3,"sources":["../src/references-empty.test.js"],"names":["messages","plain","comment","reference","references","prefix","opts","o","parserOpts","commentChar","parsed","undefined","issuePrefixes","t","actual","expected","is"],"mappings":"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","file":"references-empty.test.js","sourcesContent":["import test from 'ava';\nimport preset from 'conventional-changelog-angular';\nimport parse from '@commitlint/parse';\nimport referencesEmpty from './references-empty';\n\nconst messages = {\n\tplain: 'foo: bar',\n\tcomment: 'foo: baz\\n#1 Comment',\n\treference: '#comment\\nfoo: baz \\nCloses #1',\n\treferences: '#comment\\nfoo: bar \\nCloses #1, #2, #3',\n\tprefix: 'bar REF-1234'\n};\n\nconst opts = (async () => {\n\tconst o = await preset;\n\to.parserOpts.commentChar = '#';\n\treturn o;\n})();\n\nconst parsed = {\n\tplain: (async () =>\n\t\tparse(messages.plain, undefined, (await opts).parserOpts))(),\n\tcomment: (async () =>\n\t\tparse(messages.comment, undefined, (await opts).parserOpts))(),\n\treference: (async () =>\n\t\tparse(messages.reference, undefined, (await opts).parserOpts))(),\n\treferences: (async () =>\n\t\tparse(messages.references, undefined, (await opts).parserOpts))(),\n\tprefix: parse(messages.prefix, undefined, {\n\t\tissuePrefixes: ['REF-']\n\t})\n};\n\ntest('defaults to never and fails for plain', async t => {\n\tconst [actual] = referencesEmpty(await parsed.plain);\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('defaults to never and succeeds for reference', async t => {\n\tconst [actual] = referencesEmpty(await parsed.reference);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('fails for comment with never', async t => {\n\tconst [actual] = referencesEmpty(await parsed.comment, 'never');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('succeeds for comment with always', async t => {\n\tconst [actual] = referencesEmpty(await parsed.comment, 'always');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('succeeds for reference with never', async t => {\n\tconst [actual] = referencesEmpty(await parsed.reference, 'never');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('fails for reference with always', async t => {\n\tconst [actual] = referencesEmpty(await parsed.reference, 'always');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('succeeds for references with never', async t => {\n\tconst [actual] = referencesEmpty(await parsed.references, 'never');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('fails for references with always', async t => {\n\tconst [actual] = referencesEmpty(await parsed.references, 'always');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('succeeds for custom references with always', async t => {\n\tconst [actual] = referencesEmpty(await parsed.prefix, 'never');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n"]}