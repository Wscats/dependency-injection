{"version":3,"sources":["../src/signed-off-by.test.js"],"names":["messages","empty","with","without","inSubject","inBody","parsed","t","actual","expected","is"],"mappings":"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","file":"signed-off-by.test.js","sourcesContent":["import test from 'ava';\nimport parse from '@commitlint/parse';\nimport check from './signed-off-by';\n\nconst messages = {\n\tempty: 'test:\\n',\n\twith: `test: subject\\nbody\\nfooter\\nSigned-off-by:\\n\\n`,\n\twithout: `test: subject\\nbody\\nfooter\\n\\n`,\n\tinSubject: `test: subject Signed-off-by:\\nbody\\nfooter\\n\\n`,\n\tinBody: `test: subject\\nbody Signed-off-by:\\nfooter\\n\\n`\n};\n\nconst parsed = {\n\tempty: parse(messages.empty),\n\twith: parse(messages.with),\n\twithout: parse(messages.without),\n\tinSubject: parse(messages.inSubject),\n\tinBody: parse(messages.inBody)\n};\n\ntest('empty against \"always signed-off-by\" should fail', async t => {\n\tconst [actual] = check(await parsed.empty, 'always', 'Signed-off-by:');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('empty against \"never signed-off-by\" should succeed', async t => {\n\tconst [actual] = check(await parsed.empty, 'never', 'Signed-off-by:');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with against \"always signed-off-by\" should succeed', async t => {\n\tconst [actual] = check(await parsed.with, 'always', 'Signed-off-by:');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with against \"never signed-off-by\" should fail', async t => {\n\tconst [actual] = check(await parsed.with, 'never', 'Signed-off-by:');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('without against \"always signed-off-by\" should fail', async t => {\n\tconst [actual] = check(await parsed.without, 'always', 'Signed-off-by:');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('without against \"never signed-off-by\" should succeed', async t => {\n\tconst [actual] = check(await parsed.without, 'never', 'Signed-off-by:');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('inSubject against \"always signed-off-by\" should fail', async t => {\n\tconst [actual] = check(await parsed.inSubject, 'always', 'Signed-off-by:');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('inSubject against \"never signed-off-by\" should succeed', async t => {\n\tconst [actual] = check(await parsed.inSubject, 'never', 'Signed-off-by:');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('inBody against \"always signed-off-by\" should fail', async t => {\n\tconst [actual] = check(await parsed.inBody, 'always', 'Signed-off-by:');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('inBody against \"never signed-off-by\" should succeed', async t => {\n\tconst [actual] = check(await parsed.inBody, 'never', 'Signed-off-by:');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n"]}