{"version":3,"sources":["../src/type-case.test.js"],"names":["messages","empty","lowercase","mixedcase","uppercase","camelcase","pascalcase","snakecase","kebabcase","startcase","parsed","undefined","headerPattern","headerCorrespondence","t","actual","expected","is"],"mappings":"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","file":"type-case.test.js","sourcesContent":["import test from 'ava';\nimport parse from '@commitlint/parse';\nimport typeCase from './type-case';\n\nconst messages = {\n\tempty: '(scope): subject',\n\tlowercase: 'type: subject',\n\tmixedcase: 'tYpE: subject',\n\tuppercase: 'TYPE: subject',\n\tcamelcase: 'tyPe: subject',\n\tpascalcase: 'TyPe: subject',\n\tsnakecase: 'ty_pe: subject',\n\tkebabcase: 'ty-pe: subject',\n\tstartcase: 'Ty Pe: subject'\n};\n\nconst parsed = {\n\tempty: parse(messages.empty),\n\tlowercase: parse(messages.lowercase),\n\tmixedcase: parse(messages.mixedcase),\n\tuppercase: parse(messages.uppercase),\n\tcamelcase: parse(messages.camelcase),\n\tpascalcase: parse(messages.pascalcase),\n\tsnakecase: parse(messages.snakecase),\n\tkebabcase: parse(messages.kebabcase),\n\tstartcase: parse(messages.startcase, undefined, {\n\t\theaderPattern: /^(.*): (.*)$/,\n\t\theaderCorrespondence: ['type', 'subject']\n\t})\n};\n\ntest('with empty type should succeed for \"never lowercase\"', async t => {\n\tconst [actual] = typeCase(await parsed.empty, 'never', 'lowercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with empty type should succeed for \"always lowercase\"', async t => {\n\tconst [actual] = typeCase(await parsed.empty, 'always', 'lowercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with empty type should succeed for \"never uppercase\"', async t => {\n\tconst [actual] = typeCase(await parsed.empty, 'never', 'uppercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with empty type should succeed for \"always uppercase\"', async t => {\n\tconst [actual] = typeCase(await parsed.empty, 'always', 'uppercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with lowercase type should fail for \"never lowercase\"', async t => {\n\tconst [actual] = typeCase(await parsed.lowercase, 'never', 'lowercase');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with lowercase type should succeed for \"always lowercase\"', async t => {\n\tconst [actual] = typeCase(await parsed.lowercase, 'always', 'lowercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with mixedcase type should succeed for \"never lowercase\"', async t => {\n\tconst [actual] = typeCase(await parsed.mixedcase, 'never', 'lowercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with mixedcase type should fail for \"always lowercase\"', async t => {\n\tconst [actual] = typeCase(await parsed.mixedcase, 'always', 'lowercase');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with mixedcase type should succeed for \"never uppercase\"', async t => {\n\tconst [actual] = typeCase(await parsed.mixedcase, 'never', 'uppercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with mixedcase type should fail for \"always uppercase\"', async t => {\n\tconst [actual] = typeCase(await parsed.mixedcase, 'always', 'uppercase');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with uppercase type should fail for \"never uppercase\"', async t => {\n\tconst [actual] = typeCase(await parsed.uppercase, 'never', 'uppercase');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with lowercase type should succeed for \"always uppercase\"', async t => {\n\tconst [actual] = typeCase(await parsed.uppercase, 'always', 'uppercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with camelcase type should fail for \"always uppercase\"', async t => {\n\tconst [actual] = typeCase(await parsed.camelcase, 'always', 'uppercase');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with camelcase type should succeed for \"never uppercase\"', async t => {\n\tconst [actual] = typeCase(await parsed.camelcase, 'never', 'uppercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with camelcase type should fail for \"always pascalcase\"', async t => {\n\tconst [actual] = typeCase(await parsed.camelcase, 'always', 'pascal-case');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with camelcase type should fail for \"always kebabcase\"', async t => {\n\tconst [actual] = typeCase(await parsed.camelcase, 'always', 'kebab-case');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with camelcase type should fail for \"always snakecase\"', async t => {\n\tconst [actual] = typeCase(await parsed.camelcase, 'always', 'snake-case');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with camelcase type should fail for \"always startcase\"', async t => {\n\tconst [actual] = typeCase(await parsed.camelcase, 'always', 'start-case');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with camelcase type should succeed for \"always camelcase\"', async t => {\n\tconst [actual] = typeCase(await parsed.camelcase, 'always', 'camel-case');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with pascalcase type should fail for \"always uppercase\"', async t => {\n\tconst [actual] = typeCase(await parsed.pascalcase, 'always', 'uppercase');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with pascalcase type should succeed for \"never uppercase\"', async t => {\n\tconst [actual] = typeCase(await parsed.pascalcase, 'never', 'uppercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with pascalcase type should fail for \"always camelcase\"', async t => {\n\tconst [actual] = typeCase(await parsed.pascalcase, 'always', 'camel-case');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with pascalcase type should fail for \"always kebabcase\"', async t => {\n\tconst [actual] = typeCase(await parsed.pascalcase, 'always', 'kebab-case');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with pascalcase type should fail for \"always snakecase\"', async t => {\n\tconst [actual] = typeCase(await parsed.pascalcase, 'always', 'snake-case');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with pascalcase type should fail for \"always startcase\"', async t => {\n\tconst [actual] = typeCase(await parsed.pascalcase, 'always', 'start-case');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with pascalcase type should succeed for \"always pascalcase\"', async t => {\n\tconst [actual] = typeCase(await parsed.pascalcase, 'always', 'pascal-case');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with snakecase type should fail for \"always uppercase\"', async t => {\n\tconst [actual] = typeCase(await parsed.snakecase, 'always', 'uppercase');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with snakecase type should succeed for \"never uppercase\"', async t => {\n\tconst [actual] = typeCase(await parsed.snakecase, 'never', 'uppercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with snakecase type should fail for \"always camelcase\"', async t => {\n\tconst [actual] = typeCase(await parsed.snakecase, 'always', 'camel-case');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with snakecase type should fail for \"always kebabcase\"', async t => {\n\tconst [actual] = typeCase(await parsed.snakecase, 'always', 'kebab-case');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with snakecase type should succeed for \"always snakecase\"', async t => {\n\tconst [actual] = typeCase(await parsed.snakecase, 'always', 'snake-case');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with snakecase type should fail for \"always pascalcase\"', async t => {\n\tconst [actual] = typeCase(await parsed.snakecase, 'always', 'pascal-case');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with snakecase type should fail for \"always start case\"', async t => {\n\tconst [actual] = typeCase(await parsed.snakecase, 'always', 'start-case');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with startcase type should fail for \"always uppercase\"', async t => {\n\tconst [actual] = typeCase(await parsed.startcase, 'always', 'uppercase');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with startcase type should succeed for \"never uppercase\"', async t => {\n\tconst [actual] = typeCase(await parsed.startcase, 'never', 'uppercase');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with startcase type should fail for \"always camelcase\"', async t => {\n\tconst [actual] = typeCase(await parsed.startcase, 'always', 'camel-case');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with startcase type should fail for \"always kebabcase\"', async t => {\n\tconst [actual] = typeCase(await parsed.startcase, 'always', 'kebab-case');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with startcase type should fail for \"always snakecase\"', async t => {\n\tconst [actual] = typeCase(await parsed.startcase, 'always', 'snake-case');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with startcase type should fail for \"always pascalcase\"', async t => {\n\tconst [actual] = typeCase(await parsed.startcase, 'always', 'pascal-case');\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with startcase type should succeed for \"always startcase\"', async t => {\n\tconst [actual] = typeCase(await parsed.startcase, 'always', 'start-case');\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with uppercase scope should succeed for \"always [uppercase, lowercase]\"', async t => {\n\tconst [actual] = typeCase(await parsed.uppercase, 'always', [\n\t\t'uppercase',\n\t\t'lowercase'\n\t]);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with lowercase subject should succeed for \"always [uppercase, lowercase]\"', async t => {\n\tconst [actual] = typeCase(await parsed.lowercase, 'always', [\n\t\t'uppercase',\n\t\t'lowercase'\n\t]);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with mixedcase subject should fail for \"always [uppercase, lowercase]\"', async t => {\n\tconst [actual] = typeCase(await parsed.mixedcase, 'always', [\n\t\t'uppercase',\n\t\t'lowercase'\n\t]);\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n\ntest('with mixedcase subject should pass for \"always [uppercase, lowercase, camel-case]\"', async t => {\n\tconst [actual] = typeCase(await parsed.mixedcase, 'always', [\n\t\t'uppercase',\n\t\t'lowercase',\n\t\t'camel-case'\n\t]);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with mixedcase scope should pass for \"never [uppercase, lowercase]\"', async t => {\n\tconst [actual] = typeCase(await parsed.mixedcase, 'never', [\n\t\t'uppercase',\n\t\t'lowercase'\n\t]);\n\tconst expected = true;\n\tt.is(actual, expected);\n});\n\ntest('with uppercase scope should fail for \"never [uppercase, lowercase]\"', async t => {\n\tconst [actual] = typeCase(await parsed.uppercase, 'never', [\n\t\t'uppercase',\n\t\t'lowercase'\n\t]);\n\tconst expected = false;\n\tt.is(actual, expected);\n});\n"]}