{"version":3,"sources":["../src/scope-enum.test.js"],"names":["messages","plain","superfluous","empty","parsed","t","actual","expected","deepEqual"],"mappings":"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","file":"scope-enum.test.js","sourcesContent":["import test from 'ava';\nimport parse from '@commitlint/parse';\nimport scopeEnum from './scope-enum';\n\nconst messages = {\n\tplain: 'foo(bar): baz',\n\tsuperfluous: 'foo(): baz',\n\tempty: 'foo: baz'\n};\n\nconst parsed = {\n\tplain: parse(messages.plain),\n\tsuperfluous: parse(messages.superfluous),\n\tempty: parse(messages.empty)\n};\n\ntest('scope-enum with plain message and always should succeed empty enum', async t => {\n\tconst [actual] = scopeEnum(await parsed.plain, 'always', []);\n\tconst expected = true;\n\tt.deepEqual(actual, expected);\n});\n\ntest('scope-enum with plain message and never should error empty enum', async t => {\n\tconst [actual] = scopeEnum(await parsed.plain, 'never', []);\n\tconst expected = false;\n\tt.deepEqual(actual, expected);\n});\n\ntest('with plain message should succeed correct enum', async t => {\n\tconst [actual] = scopeEnum(await parsed.plain, 'always', ['bar']);\n\tconst expected = true;\n\tt.deepEqual(actual, expected);\n});\n\ntest('scope-enum with plain message should error false enum', async t => {\n\tconst [actual] = scopeEnum(await parsed.plain, 'always', ['foo']);\n\tconst expected = false;\n\tt.deepEqual(actual, expected);\n});\n\ntest('scope-enum with plain message should error forbidden enum', async t => {\n\tconst [actual] = scopeEnum(await parsed.plain, 'never', ['bar']);\n\tconst expected = false;\n\tt.deepEqual(actual, expected);\n});\n\ntest('scope-enum with plain message should succeed forbidden enum', async t => {\n\tconst [actual] = scopeEnum(await parsed.plain, 'never', ['foo']);\n\tconst expected = true;\n\tt.deepEqual(actual, expected);\n});\n\ntest('scope-enum with superfluous scope should succeed enum', async t => {\n\tconst [actual] = scopeEnum(await parsed.superfluous, 'always', ['bar']);\n\tconst expected = true;\n\tt.deepEqual(actual, expected);\n});\n\ntest('scope-enum with superfluous scope and \"never\" should succeed', async t => {\n\tconst [actual] = scopeEnum(await parsed.superfluous, 'never', ['bar']);\n\tconst expected = true;\n\tt.deepEqual(actual, expected);\n});\n\ntest('scope-enum with superfluous scope and always should succeed empty enum', async t => {\n\tconst [actual] = scopeEnum(await parsed.superfluous, 'always', []);\n\tconst expected = true;\n\tt.deepEqual(actual, expected);\n});\n\ntest('scope-enum with superfluous scope and never should succeed empty enum', async t => {\n\tconst [actual] = scopeEnum(await parsed.superfluous, 'never', []);\n\tconst expected = true;\n\tt.deepEqual(actual, expected);\n});\n\ntest('scope-enum with empty scope and always should succeed empty enum', async t => {\n\tconst [actual] = scopeEnum(await parsed.superfluous, 'always', []);\n\tconst expected = true;\n\tt.deepEqual(actual, expected);\n});\n\ntest('scope-enum with empty scope and always should succeed filled enum', async t => {\n\tconst [actual] = scopeEnum(await parsed.superfluous, 'always', ['foo']);\n\tconst expected = true;\n\tt.deepEqual(actual, expected);\n});\n\ntest('scope-enum with empty scope and never should succeed empty enum', async t => {\n\tconst [actual] = scopeEnum(await parsed.superfluous, 'never', []);\n\tconst expected = true;\n\tt.deepEqual(actual, expected);\n});\n"]}