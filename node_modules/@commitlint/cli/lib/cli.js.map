{"version":3,"sources":["../src/cli.js"],"names":["require","format","load","lint","read","chalk","meow","merge","pick","stdin","pkg","help","flags","color","alias","default","description","type","config","cwd","process","edit","extends","from","quiet","to","version","cli","name","unknown","arg","Error","main","catch","setTimeout","err","exit","options","raw","input","normalizeFlags","fromStdin","checkFromStdin","range","fmt","constructor","enabled","messages","Array","isArray","filter","message","Boolean","length","checkFromRepository","console","log","loadOpts","file","getSeed","loaded","parserOpts","selectParserOpts","parserPreset","opts","commentChar","Promise","all","map","rules","report","formatted","errors","split","grey","bold","join","error","checkFromHistory","checkFromEdit","normalizeEdit","e","env","GIT_PARAMS","seed","n","i","undefined","on","reason","promise"],"mappings":"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","file":"cli.js","sourcesContent":["\nrequire('babel-polyfill'); // eslint-disable-line import/no-unassigned-import\n\nconst format = require('@commitlint/format');\nconst load = require('@commitlint/load');\nconst lint = require('@commitlint/lint');\nconst read = require('@commitlint/read');\nconst chalk = require('chalk');\nconst meow = require('meow');\nconst merge = require('lodash.merge');\nconst pick = require('lodash.pick');\nconst stdin = require('get-stdin');\n\nconst pkg = require('../package');\nconst help = require('./help');\n\nconst flags = {\n\tcolor: {\n\t\talias: 'c',\n\t\tdefault: true,\n\t\tdescription: 'toggle colored output',\n\t\ttype: 'boolean'\n\t},\n\tconfig: {\n\t\talias: 'g',\n\t\tdefault: null,\n\t\tdescription: 'path to the config file',\n\t\ttype: 'string'\n\t},\n\tcwd: {\n\t\talias: 'd',\n\t\tdefault: process.cwd(),\n\t\tdescription: 'directory to execute in',\n\t\ttype: 'string'\n\t},\n\tedit: {\n\t\talias: 'e',\n\t\tdefault: false,\n\t\tdescription:\n\t\t\t'read last commit message from the specified file or fallbacks to ./.git/COMMIT_EDITMSG',\n\t\ttype: 'string'\n\t},\n\textends: {\n\t\talias: 'x',\n\t\tdescription: 'array of shareable configurations to extend',\n\t\ttype: 'string'\n\t},\n\thelp: {\n\t\talias: 'h',\n\t\ttype: 'boolean'\n\t},\n\tfrom: {\n\t\talias: 'f',\n\t\tdefault: null,\n\t\tdescription: 'lower end of the commit range to lint; applies if edit=false',\n\t\ttype: 'string'\n\t},\n\t'parser-preset': {\n\t\talias: 'p',\n\t\tdescription: 'configuration preset to use for conventional-commits-parser',\n\t\ttype: 'string'\n\t},\n\tquiet: {\n\t\talias: 'q',\n\t\tdefault: false,\n\t\tdescription: 'toggle console output',\n\t\ttype: 'boolean'\n\t},\n\tto: {\n\t\talias: 't',\n\t\tdefault: null,\n\t\tdescription: 'upper end of the commit range to lint; applies if edit=false',\n\t\ttype: 'string'\n\t},\n\tversion: {\n\t\talias: 'v',\n\t\ttype: 'boolean'\n\t}\n};\n\nconst cli = meow({\n\tdescription: `${pkg.name}@${pkg.version} - ${pkg.description}`,\n\tflags,\n\thelp: `[input] reads from stdin if --edit, --from and --to are omitted\\n${help(\n\t\tflags\n\t)}`,\n\tunknown(arg) {\n\t\tthrow new Error(`unknown flags: ${arg}`);\n\t}\n});\n\nmain(cli).catch(err =>\n\tsetTimeout(() => {\n\t\tif (err.type === pkg.name) {\n\t\t\tprocess.exit(1);\n\t\t}\n\t\tthrow err;\n\t})\n);\n\nasync function main(options) {\n\tconst raw = options.input;\n\tconst flags = normalizeFlags(options.flags);\n\tconst fromStdin = checkFromStdin(raw, flags);\n\n\tconst range = pick(flags, 'edit', 'from', 'to');\n\tconst fmt = new chalk.constructor({enabled: flags.color});\n\n\tconst input = await (fromStdin ? stdin() : read(range, {cwd: flags.cwd}));\n\n\tconst messages = (Array.isArray(input) ? input : [input])\n\t\t.filter(message => typeof message === 'string')\n\t\t.filter(Boolean);\n\n\tif (messages.length === 0 && !checkFromRepository(flags)) {\n\t\tconst err = new Error(\n\t\t\t'[input] is required: supply via stdin, or --edit or --from and --to'\n\t\t);\n\t\terr.type = pkg.name;\n\t\tconsole.log(`${cli.help}\\n`);\n\t\tconsole.log(err.message);\n\t\tthrow err;\n\t}\n\n\tconst loadOpts = {cwd: flags.cwd, file: flags.config};\n\tconst loaded = await load(getSeed(flags), loadOpts);\n\tconst parserOpts = selectParserOpts(loaded.parserPreset);\n\tconst opts = parserOpts ? {parserOpts} : {parserOpts: {}};\n\n\t// Strip comments if reading from `.git/COMMIT_EDIT_MSG`\n\tif (range.edit) {\n\t\topts.parserOpts.commentChar = '#';\n\t}\n\n\treturn Promise.all(\n\t\tmessages.map(async message => {\n\t\t\tconst report = await lint(message, loaded.rules, opts);\n\t\t\tconst formatted = format(report, {color: flags.color});\n\t\t\tconst input =\n\t\t\t\treport.errors.length > 0\n\t\t\t\t\t? `\\n${report.input}\\n`\n\t\t\t\t\t: message.split('\\n')[0];\n\n\t\t\tif (!flags.quiet) {\n\t\t\t\tconsole.log(`${fmt.grey('⧗')}   input: ${fmt.bold(input)}`);\n\t\t\t\tconsole.log(formatted.join('\\n'));\n\t\t\t}\n\n\t\t\tif (report.errors.length > 0) {\n\t\t\t\tconst error = new Error(formatted[formatted.length - 1]);\n\t\t\t\terror.type = pkg.name;\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t\tconsole.log('');\n\t\t})\n\t);\n}\n\nfunction checkFromStdin(input, flags) {\n\treturn input.length === 0 && !checkFromRepository(flags);\n}\n\nfunction checkFromRepository(flags) {\n\treturn checkFromHistory(flags) || checkFromEdit(flags);\n}\n\nfunction checkFromEdit(flags) {\n\treturn Boolean(flags.edit);\n}\n\nfunction checkFromHistory(flags) {\n\treturn typeof flags.from === 'string' || typeof flags.to === 'string';\n}\n\nfunction normalizeFlags(flags) {\n\t// The `edit` flag is either a boolean or a string but we are only allowed\n\t// to specify one of them in minimist\n\tconst edit = flags.edit === '' ? true : normalizeEdit(flags.edit);\n\treturn merge({}, flags, {edit, e: edit});\n}\n\nfunction normalizeEdit(edit) {\n\tif (typeof edit === 'boolean') {\n\t\treturn edit;\n\t}\n\t// The recommended method to specify -e with husky is commitlint -e $GIT_PARAMS\n\t// This does not work properly with win32 systems, where env variable declarations\n\t// use a different syntax\n\t// See https://github.com/marionebl/commitlint/issues/103 for details\n\tif (edit === '$GIT_PARAMS' || edit === '%GIT_PARAMS%') {\n\t\tif (!('GIT_PARAMS' in process.env)) {\n\t\t\tthrow new Error(\n\t\t\t\t`Received ${edit} as value for -e | --edit, but GIT_PARAMS is not available globally.`\n\t\t\t);\n\t\t}\n\t\treturn process.env.GIT_PARAMS;\n\t}\n\treturn edit;\n}\n\nfunction getSeed(seed) {\n\tconst e = Array.isArray(seed.extends) ? seed.extends : [seed.extends];\n\tconst n = e.filter(i => typeof i === 'string');\n\treturn n.length > 0\n\t\t? {extends: n, parserPreset: seed.parserPreset}\n\t\t: {parserPreset: seed.parserPreset};\n}\n\nfunction selectParserOpts(parserPreset) {\n\tif (typeof parserPreset !== 'object') {\n\t\treturn undefined;\n\t}\n\n\tif (typeof parserPreset.parserOpts !== 'object') {\n\t\treturn undefined;\n\t}\n\n\treturn parserPreset.parserOpts;\n}\n\n// Catch unhandled rejections globally\nprocess.on('unhandledRejection', (reason, promise) => {\n\tconsole.log('Unhandled Rejection at: Promise ', promise, ' reason: ', reason);\n\tthrow reason;\n});\n"]}