{"version":3,"sources":["../src/help.js"],"names":["module","exports","lines","Object","entries","flags","map","name","entry","value","alias","filter","Boolean","description","default","longest","line","reduce","sum","flag","length","sort","a","b","desc","defaults","fs","ds","join","repeat"],"mappings":";;AAAAA,OAAOC,OAAP,GAAiB,iBAAS;AACzB,KAAMC,QAAQC,OAAOC,OAAP,CAAeC,KAAf,EAAsBC,GAAtB,CAA0B,iBAAS;AAChD,MAAMC,OAAOC,MAAM,CAAN,CAAb;AACA,MAAMC,QAAQD,MAAM,CAAN,CAAd;AACA,SAAO,CACN,CAACD,IAAD,EAAOE,MAAMC,KAAb,EAAoBC,MAApB,CAA2BC,OAA3B,CADM,EAENH,MAAMI,WAFA,EAGNJ,MAAMK,OAHA,EAILH,MAJK,CAIEC,OAJF,CAAP;AAKA,EARa,CAAd;;AAUA,KAAMG,UAAUb,MACdI,GADc,CACV,gBAAQ;AACZ,MAAMD,QAAQW,KAAK,CAAL,CAAd;AACA,SAAOX,MAAMY,MAAN,CAAa,UAACC,GAAD,EAAMC,IAAN;AAAA,UAAeD,MAAMC,KAAKC,MAA1B;AAAA,GAAb,EAA+C,CAA/C,CAAP;AACA,EAJc,EAKdC,IALc,CAKT,UAACC,CAAD,EAAIC,CAAJ;AAAA,SAAUA,IAAID,CAAd;AAAA,EALS,EAKQ,CALR,CAAhB;;AAOA,QAAOpB,MACLI,GADK,CACD,gBAAQ;AACZ,MAAMD,QAAQW,KAAK,CAAL,CAAd;AACA,MAAMQ,OAAOR,KAAK,CAAL,CAAb;AACA,MAAMS,WAAWT,KAAK,CAAL,CAAjB;AACA,MAAMU,KAAKrB,MAAMC,GAAN,CACV;AAAA,UAASa,KAAKC,MAAL,GAAc,CAAd,GAAmB,KAAID,IAAK,EAA5B,GAAiC,KAAIA,IAAK,EAAnD;AAAA,GADU,CAAX;AAGA,MAAMQ,KAAKF,WAAY,kBAAiBA,QAAS,EAAtC,GAA0C,EAArD;AACA,MAAML,SAASf,MAAMY,MAAN,CAAa,UAACC,GAAD,EAAMC,IAAN;AAAA,UAAeD,MAAMC,KAAKC,MAA1B;AAAA,GAAb,EAA+C,CAA/C,CAAf;AACA,SAAQ,GAAEM,GAAGE,IAAH,CAAQ,GAAR,CAAa,GAAE,IAAIC,MAAJ,CAAW,IAAId,OAAJ,GAAcK,MAAzB,CAAiC,GAAEI,IAAK,GAAEG,EAAG,EAAtE;AACA,EAXK,EAYLC,IAZK,CAYA,IAZA,CAAP;AAaA,CA/BD","file":"help.js","sourcesContent":["module.exports = flags => {\n\tconst lines = Object.entries(flags).map(entry => {\n\t\tconst name = entry[0];\n\t\tconst value = entry[1];\n\t\treturn [\n\t\t\t[name, value.alias].filter(Boolean),\n\t\t\tvalue.description,\n\t\t\tvalue.default\n\t\t].filter(Boolean);\n\t});\n\n\tconst longest = lines\n\t\t.map(line => {\n\t\t\tconst flags = line[0];\n\t\t\treturn flags.reduce((sum, flag) => sum + flag.length, 0);\n\t\t})\n\t\t.sort((a, b) => b - a)[0];\n\n\treturn lines\n\t\t.map(line => {\n\t\t\tconst flags = line[0];\n\t\t\tconst desc = line[1];\n\t\t\tconst defaults = line[2];\n\t\t\tconst fs = flags.map(\n\t\t\t\tflag => (flag.length > 1 ? `--${flag}` : ` -${flag}`)\n\t\t\t);\n\t\t\tconst ds = defaults ? `, defaults to: ${defaults}` : '';\n\t\t\tconst length = flags.reduce((sum, flag) => sum + flag.length, 0);\n\t\t\treturn `${fs.join(',')}${' '.repeat(4 + longest - length)}${desc}${ds}`;\n\t\t})\n\t\t.join('\\n');\n};\n"]}