{"version":3,"sources":["../src/cli.test.js"],"names":["sander","bin","join","__dirname","cli","args","options","input","c","capture","cwd","env","pipe","stdin","catch","err","t","bootstrap","actual","is","code","true","stdout","includes","stderr","file","writePkg","scripts","commitmsg","upper","outer","init","message","false","split","payload","pkgPath","readFile","pkg","JSON","parse","result","writeFile","stringify"],"mappings":"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","file":"cli.test.js","sourcesContent":["import path from 'path';\nimport {fix, git} from '@commitlint/test';\nimport test from 'ava';\nimport execa from 'execa';\nimport merge from 'lodash.merge';\nimport * as sander from 'sander';\nimport stream from 'string-to-stream';\n\nconst bin = path.join(__dirname, './cli.js');\n\nconst cli = (args, options) => {\n\treturn (input = '') => {\n\t\tconst c = execa(bin, args, {\n\t\t\tcapture: ['stdout'],\n\t\t\tcwd: options.cwd,\n\t\t\tenv: options.env\n\t\t});\n\t\tstream(input).pipe(c.stdin);\n\t\treturn c.catch(err => err);\n\t};\n};\n\ntest('should throw when called without [input]', async t => {\n\tconst cwd = await git.bootstrap('fixtures/empty');\n\tconst actual = await cli([], {cwd})();\n\tt.is(actual.code, 1);\n});\n\ntest('should reprint input from stdin', async t => {\n\tconst cwd = await git.bootstrap('fixtures/empty');\n\tconst actual = await cli([], {cwd})('foo: bar');\n\tt.true(actual.stdout.includes('foo: bar'));\n});\n\ntest('should produce no success output with --quiet flag', async t => {\n\tconst cwd = await git.bootstrap('fixtures/empty');\n\tconst actual = await cli(['--quiet'], {cwd})('foo: bar');\n\tt.is(actual.stdout, '');\n\tt.is(actual.stderr, '');\n});\n\ntest('should produce no success output with -q flag', async t => {\n\tconst cwd = await git.bootstrap('fixtures/empty');\n\tconst actual = await cli(['-q'], {cwd})('foo: bar');\n\tt.is(actual.stdout, '');\n\tt.is(actual.stderr, '');\n});\n\ntest('should succeed for input from stdin without rules', async t => {\n\tconst cwd = await git.bootstrap('fixtures/empty');\n\tconst actual = await cli([], {cwd})('foo: bar');\n\tt.is(actual.code, 0);\n});\n\ntest('should fail for input from stdin with rule from rc', async t => {\n\tconst cwd = await git.bootstrap('fixtures/simple');\n\tconst actual = await cli([], {cwd})('foo: bar');\n\tt.true(actual.stdout.includes('type must not be one of [foo]'));\n\tt.is(actual.code, 1);\n});\n\ntest('should work with --config option', async t => {\n\tconst file = 'config/commitlint.config.js';\n\tconst cwd = await git.bootstrap('fixtures/specify-config-file');\n\tconst actual = await cli(['--config', file], {cwd})('foo: bar');\n\tt.true(actual.stdout.includes('type must not be one of [foo]'));\n\tt.is(actual.code, 1);\n});\n\ntest('should fail for input from stdin with rule from js', async t => {\n\tconst cwd = await git.bootstrap('fixtures/extends-root');\n\tconst actual = await cli(['--extends', './extended'], {cwd})('foo: bar');\n\tt.true(actual.stdout.includes('type must not be one of [foo]'));\n\tt.is(actual.code, 1);\n});\n\ntest('should produce no error output with --quiet flag', async t => {\n\tconst cwd = await git.bootstrap('fixtures/simple');\n\tconst actual = await cli(['--quiet'], {cwd})('foo: bar');\n\tt.is(actual.stdout, '');\n\tt.is(actual.stderr, '');\n\tt.is(actual.code, 1);\n});\n\ntest('should produce no error output with -q flag', async t => {\n\tconst cwd = await git.bootstrap('fixtures/simple');\n\tconst actual = await cli(['-q'], {cwd})('foo: bar');\n\tt.is(actual.stdout, '');\n\tt.is(actual.stderr, '');\n\tt.is(actual.code, 1);\n});\n\ntest('should work with husky commitmsg hook and git commit', async () => {\n\tconst cwd = await git.bootstrap('fixtures/husky/integration');\n\tawait writePkg({scripts: {commitmsg: `${bin} -e`}}, {cwd});\n\n\tawait execa('npm', ['install'], {cwd});\n\tawait execa('git', ['add', 'package.json'], {cwd});\n\tawait execa('git', ['commit', '-m', '\"test: this should work\"'], {cwd});\n});\n\ntest('should work with husky commitmsg hook in sub packages', async () => {\n\tconst upper = await git.bootstrap('fixtures/husky');\n\tconst cwd = path.join(upper, 'integration');\n\tawait writePkg({scripts: {commitmsg: `${bin} -e`}}, {cwd: upper});\n\n\tawait execa('npm', ['install'], {cwd});\n\tawait execa('git', ['add', 'package.json'], {cwd});\n\tawait execa('git', ['commit', '-m', '\"test: this should work\"'], {cwd});\n});\n\ntest('should work with husky via commitlint -e $GIT_PARAMS', async () => {\n\tconst cwd = await git.bootstrap('fixtures/husky/integration');\n\tawait writePkg({scripts: {commitmsg: `${bin} -e $GIT_PARAMS`}}, {cwd});\n\n\tawait execa('npm', ['install'], {cwd});\n\tawait execa('git', ['add', 'package.json'], {cwd});\n\tawait execa('git', ['commit', '-m', '\"test: this should work\"'], {cwd});\n});\n\ntest('should work with husky via commitlint -e %GIT_PARAMS%', async () => {\n\tconst cwd = await git.bootstrap('fixtures/husky/integration');\n\tawait writePkg({scripts: {commitmsg: `${bin} -e %GIT_PARAMS%`}}, {cwd});\n\n\tawait execa('npm', ['install'], {cwd});\n\tawait execa('git', ['add', 'package.json'], {cwd});\n\tawait execa('git', ['commit', '-m', '\"test: this should work\"'], {cwd});\n});\n\ntest('should pick up parser preset and fail accordingly', async t => {\n\tconst cwd = await git.bootstrap('fixtures/parser-preset');\n\tconst actual = await cli(['--parser-preset', './parser-preset'], {cwd})(\n\t\t'type(scope): subject'\n\t);\n\tt.is(actual.code, 1);\n\tt.true(actual.stdout.includes('message may not be empty [subject-empty]'));\n});\n\ntest('should pick up parser preset and succeed accordingly', async t => {\n\tconst cwd = await git.bootstrap('fixtures/parser-preset');\n\tconst actual = await cli(['--parser-preset', './parser-preset'], {cwd})(\n\t\t'----type(scope): subject'\n\t);\n\tt.is(actual.code, 0);\n});\n\ntest('should pick up config from outside git repo and fail accordingly', async t => {\n\tconst outer = await fix.bootstrap('fixtures/outer-scope');\n\tconst cwd = await git.init(path.join(outer, 'inner-scope'));\n\n\tconst actual = await cli([], {cwd})('inner: bar');\n\tt.is(actual.code, 1);\n});\n\ntest('should pick up config from outside git repo and succeed accordingly', async t => {\n\tconst outer = await fix.bootstrap('fixtures/outer-scope');\n\tconst cwd = await git.init(path.join(outer, 'inner-scope'));\n\n\tconst actual = await cli([], {cwd})('outer: bar');\n\tt.is(actual.code, 0);\n});\n\ntest('should pick up config from inside git repo with precedence and succeed accordingly', async t => {\n\tconst outer = await fix.bootstrap('fixtures/inner-scope');\n\tconst cwd = await git.init(path.join(outer, 'inner-scope'));\n\n\tconst actual = await cli([], {cwd})('inner: bar');\n\tt.is(actual.code, 0);\n});\n\ntest('should pick up config from inside git repo with precedence and fail accordingly', async t => {\n\tconst outer = await fix.bootstrap('fixtures/inner-scope');\n\tconst cwd = await git.init(path.join(outer, 'inner-scope'));\n\n\tconst actual = await cli([], {cwd})('outer: bar');\n\tt.is(actual.code, 1);\n});\n\ntest('should handle --amend with signoff', async () => {\n\tconst cwd = await git.bootstrap('fixtures/signoff');\n\tawait writePkg({scripts: {commitmsg: `${bin} -e`}}, {cwd});\n\n\tawait execa('npm', ['install'], {cwd});\n\tawait execa('git', ['add', 'package.json'], {cwd});\n\tawait execa(\n\t\t'git',\n\t\t['commit', '-m', '\"test: this should work\"', '--signoff'],\n\t\t{cwd}\n\t);\n\tawait execa('git', ['commit', '--amend', '--no-edit'], {cwd});\n});\n\ntest('should handle linting with issue prefixes', async t => {\n\tconst cwd = await git.bootstrap('fixtures/issue-prefixes');\n\tconst actual = await cli([], {cwd})('foobar REF-1');\n\tt.is(actual.code, 0);\n});\n\ntest('should print full commit message when input from stdin fails', async t => {\n\tconst cwd = await git.bootstrap('fixtures/simple');\n\tconst input = 'foo: bar\\n\\nFoo bar bizz buzz.\\n\\nCloses #123.';\n\tconst actual = await cli([], {cwd})(input);\n\n\tt.true(actual.stdout.includes(input));\n\tt.is(actual.code, 1);\n});\n\ntest('should not print full commit message when input succeeds', async t => {\n\tconst cwd = await git.bootstrap('fixtures/empty');\n\tconst message = 'foo: bar\\n\\nFoo bar bizz buzz.\\n\\nCloses #123.';\n\tconst actual = await cli([], {cwd})(message);\n\n\tt.false(actual.stdout.includes(message));\n\tt.true(actual.stdout.includes(message.split('\\n')[0]));\n\tt.is(actual.code, 0);\n});\n\nasync function writePkg(payload, options) {\n\tconst pkgPath = path.join(options.cwd, 'package.json');\n\tconst pkg = JSON.parse(await sander.readFile(pkgPath));\n\tconst result = merge(pkg, payload);\n\tawait sander.writeFile(pkgPath, JSON.stringify(result, null, '  '));\n}\n"]}