{"version":3,"sources":["../src/index.test.js"],"names":["t","throws","error","is","message","actual","raw","m","result","expected","body","footer","header","mentions","merge","notes","references","revert","scope","subject","type","deepEqual","process","cwd","changelogOpts","undefined","parserOpts","opts","Object","assign","commentChar","issue","issuePrefixes","falsy","find","ref","action","owner","prefix","repository"],"mappings":"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","file":"index.test.js","sourcesContent":["import importFrom from 'import-from';\nimport test from 'ava';\nimport parse from '.';\n\ntest('throws when called without params', async t => {\n\tconst error = await t.throws(parse());\n\tt.is(error.message, 'Expected a raw commit');\n});\n\ntest('throws when called with empty message', async t => {\n\tconst error = await t.throws(parse());\n\tt.is(error.message, 'Expected a raw commit');\n});\n\ntest('returns object with raw message', async t => {\n\tconst message = 'type(scope): subject';\n\tconst actual = await parse(message);\n\tt.is(actual.raw, message);\n});\n\ntest('calls parser with message and passed options', async t => {\n\tconst message = 'message';\n\n\tawait parse(message, m => {\n\t\tt.is(message, m);\n\t\treturn {};\n\t});\n});\n\ntest('passes object up from parser function', async t => {\n\tconst message = 'message';\n\tconst result = {};\n\tconst actual = await parse(message, () => result);\n\tt.is(actual, result);\n});\n\ntest('returns object with expected keys', async t => {\n\tconst message = 'message';\n\tconst actual = await parse(message);\n\tconst expected = {\n\t\tbody: null,\n\t\tfooter: null,\n\t\theader: 'message',\n\t\tmentions: [],\n\t\tmerge: null,\n\t\tnotes: [],\n\t\traw: 'message',\n\t\treferences: [],\n\t\trevert: null,\n\t\tscope: null,\n\t\tsubject: null,\n\t\ttype: null\n\t};\n\tt.deepEqual(actual, expected);\n});\n\ntest('uses angular grammar', async t => {\n\tconst message = 'type(scope): subject';\n\tconst actual = await parse(message);\n\tconst expected = {\n\t\tbody: null,\n\t\tfooter: null,\n\t\theader: 'type(scope): subject',\n\t\tmentions: [],\n\t\tmerge: null,\n\t\tnotes: [],\n\t\traw: 'type(scope): subject',\n\t\treferences: [],\n\t\trevert: null,\n\t\tscope: 'scope',\n\t\tsubject: 'subject',\n\t\ttype: 'type'\n\t};\n\tt.deepEqual(actual, expected);\n});\n\ntest('uses custom opts parser', async t => {\n\tconst message = 'type(scope)-subject';\n\tconst changelogOpts = await importFrom(\n\t\tprocess.cwd(),\n\t\t'./fixtures/parser-preset/conventional-changelog-custom'\n\t);\n\tconst actual = await parse(message, undefined, changelogOpts.parserOpts);\n\tconst expected = {\n\t\tbody: null,\n\t\tfooter: null,\n\t\theader: 'type(scope)-subject',\n\t\tmentions: [],\n\t\tmerge: null,\n\t\tnotes: [],\n\t\traw: 'type(scope)-subject',\n\t\treferences: [],\n\t\trevert: null,\n\t\tscope: 'scope',\n\t\tsubject: 'subject',\n\t\ttype: 'type'\n\t};\n\tt.deepEqual(actual, expected);\n});\n\ntest('supports scopes with /', async t => {\n\tconst message = 'type(some/scope): subject';\n\tconst actual = await parse(message);\n\tt.is(actual.scope, 'some/scope');\n\tt.is(actual.subject, 'subject');\n});\n\ntest('supports scopes with / and empty parserOpts', async t => {\n\tconst message = 'type(some/scope): subject';\n\tconst actual = await parse(message, undefined, {});\n\tt.is(actual.scope, 'some/scope');\n\tt.is(actual.subject, 'subject');\n});\n\ntest('ignores comments', async t => {\n\tconst message = 'type(some/scope): subject\\n# some comment';\n\tconst changelogOpts = await importFrom(\n\t\tprocess.cwd(),\n\t\t'conventional-changelog-angular'\n\t);\n\tconst opts = Object.assign({}, changelogOpts.parserOpts, {commentChar: '#'});\n\tconst actual = await parse(message, undefined, opts);\n\tt.is(actual.body, null);\n\tt.is(actual.footer, null);\n\tt.is(actual.subject, 'subject');\n});\n\ntest('registers inline #', async t => {\n\tconst message =\n\t\t'type(some/scope): subject #reference\\n# some comment\\nthings #reference';\n\tconst changelogOpts = await importFrom(\n\t\tprocess.cwd(),\n\t\t'conventional-changelog-angular'\n\t);\n\tconst opts = Object.assign({}, changelogOpts.parserOpts, {commentChar: '#'});\n\tconst actual = await parse(message, undefined, opts);\n\tt.is(actual.subject, 'subject #reference');\n\tt.is(actual.body, 'things #reference');\n});\n\ntest('parses references leading subject', async t => {\n\tconst message = '#1 some subject';\n\tconst opts = await importFrom(\n\t\tprocess.cwd(),\n\t\t'conventional-changelog-angular'\n\t);\n\tconst {references: [actual]} = await parse(message, undefined, opts);\n\tt.is(actual.issue, '1');\n});\n\ntest('parses custom references', async t => {\n\tconst message = '#1 some subject PREFIX-2';\n\tconst {references} = await parse(message, undefined, {\n\t\tissuePrefixes: ['PREFIX-']\n\t});\n\n\tt.falsy(references.find(ref => ref.issue === '1'));\n\tt.deepEqual(references.find(ref => ref.issue === '2'), {\n\t\taction: null,\n\t\tissue: '2',\n\t\towner: null,\n\t\tprefix: 'PREFIX-',\n\t\traw: '#1 some subject PREFIX-2',\n\t\trepository: null\n\t});\n});\n"]}